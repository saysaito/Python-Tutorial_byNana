Python Tutorial for Beginners - Learn Python in 5 Hours [FULL COURSE] - YouTube
https://www.youtube.com/watch?v=t8pPdKYpowI

Transcript:
(00:00) hello and welcome to this python course in this full course you'll learn everything you need to get started with python python is the most popular programming language out there and is used for so many different industries like web development data science machine learning or generally for writing automation programs to automate repetitive tasks so learning python is definitely a good idea let me give you a short overview of all the topics i'll cover in this course after giving a short introduction to python
(00:37) we will start with the basic building blocks of programming the most important data types like strings numbers lists sets dictionaries boolean data types etc and how to work with them learn about variables and functions and why we need them write a program that accepts user input and learn how to validate the user input using conditionals error handling with try accept and also learn loops with while and for loops and again why we actually need them you will learn all these concepts with hands-on examples as a next step
(01:19) you will learn how to modularize your program by writing your own modules and then see how to use some built-in python modules with all this knowledge we can then build our next demo project to write a small program that accepts a goal and a deadline as user input and then outputs the number of days remaining till the goal deadline within this exercise you will learn how to use the date time module to work with dates after that you will learn about packages and comparison of package versus module and we will use an
(01:59) external python package in our next demo project in which we will automate some tasks for working with a spreadsheet file finally we dive into object-oriented programming you will learn what classes and objects are in programming and python specifically and why this concept is so useful in the final demo project you will learn another common use case with python which is communicating with other applications over the internet by making a request to fetch some data from gitlab api in this specific case we will list the
(02:38) gitlab projects of a specific user so that's what we're gonna learn if you like this course don't forget to give this video a thumbs up i'm really excited to teach you all of these so let's get started first of all python is a programming language just like java or javascript python compared to other languages has two very big advantages first of all it's easy to learn it has a simple syntax and it's very easy to set up and get started with for example compared to java where you need some initial configuration before you
(03:18) can even start your application but it's equally or even more powerful than java now what makes a language powerful or how can i say that python is more powerful well that comes from the ecosystem which means libraries and modules that python developers themselves develop but also external developers create and maintain so the more people adopt the language the more powerful it gets because new libraries and so new functionalities get added to it and the second advantage is that it's flexible now what does a
(03:55) flexible mean in this case what makes a language flexible it is easy to mold to your wishes so you are not limited or restricted by the language specifics like syntax or data types or some other constraints or even library functionalities you can extend python widely and as one of the results of this flexibility python also became a multi-purpose language meaning it is used for many different categories so let's see what these categories are first you can use it to write web applications the popular libraries for
(04:36) that are django or more lightweight flask python became extremely popular because of the rise of data science machine learning and artificial intelligence industries and more and more libraries were created and are still being added for python for all these categories they are very popular and highly used libraries for data analysis and data visualization libraries for artificial intelligence projects for things like face recognition voice recognition and a bunch of very powerful and widely used machine learning libraries
(05:14) python is also often used for data collection like scraping the web creating web crawlers that are basically programs that collect data from internet which you can save and then process later again many different powerful libraries to do all of that and finally automation with python python has many great libraries to automate devops tasks for example starting from ci cd pipelines to cloud platforms and monitoring your infrastructure etc you can also write python scripts to do automated backups cleanups on the servers etc
(05:53) in addition to devops tasks you can also automate just general tasks with python like when working with excel sheets which is a common use case in many big companies or automating some tasks on your own laptop and there are also libraries for mobile development gaming desktop applications but these are less likely use cases for python because there are better alternatives for that so you see that the use cases for python are pretty vast and it actually spans several industries and it's mostly concentrated around data analytics machine learning
(06:31) and automation areas and note that this isn't the case for many other programming languages usually one programming language is good for just few things and you should use something else for other use cases so now you see how useful python knowledge could be and how it can help you in your job but also make you more valuable at your work and for your entire team i hope you are already excited to learn python so let's get started as a first step we're going to configure our local python development environment so the
(07:10) first thing we need is install python locally on our laptop so first we install or download python package for your specific operating system and then basically just click through the installer wizard to install python locally on your laptop and note that if you're doing this on windows very important step in the installation process would be to check the ed python to path option basically that you see here because by default it is unchecked and you have to check mark it so that after the installation you'll be able to execute python
(07:56) commands in your terminal now an interesting note here if you're using mac os like i do is that by default on mac os there is python already installed so if i do python version and execute i see that python version 2.7 10 is installed and that is actually python that mac os the operating system itself is using however for our tutorial and generally when working with python we want to be using the newest version which is python 3.
(08:34) so we're going to leave that default python installation alone we're not going to use that or touched it and instead we're going to be using the python version 3 that we just installed locally so now if i clean this up and we want to execute python version 3 commands we're going to do python 3 instead and version and that will give us the version so that's how we can differentiate between the already installed python and the newest version that we just installed so just be aware of that difference now that we have python available
(09:14) locally it's time to download a code editor for python because we're going to be writing files with python code so we need a proper editor for writing python code and actually the best python code editor available out there currently is pycharm which is from jetbrains so that's what we're going to be using throughout our tutorial so let's go to pycharm it is an intelligent code editor which makes it much easier to write code so it makes you actually very productive when writing code and we will see why throughout the
(09:53) course as you can see there are two versions we have the community version and professional one community version is free and already has a lot of powerful features but the professional edition gives you additional very useful features especially if you're creating web applications or scientific projects in python so with professional version additionally you will get scientific tools that you can use in scientific projects with python but also you get support for python web frameworks and database integration which can be of course
(10:27) very helpful if you're developing web applications if you want to get the professional edition jetbrains actually provided me with a code for my channel to try it out for three months for free just use my code when you install it but for this demo community version is absolutely fine so i will go with this one and install it and just click download and once the pycharm installer is fully downloaded we can just click on it move it to the application and now i can actually use it locally so i'm just gonna open the
(11:09) application and we're gonna take a quick tour around pychar it's actually pretty simple to set it up and there you go we have our pycharm and we can now create a new project and let's call it my python project and that's it basically we don't need to change anything else and here you see the location basically of where this application folder will be created you see pycharm projects folder got created in my users directory so this is basically very convenient because all my pycharm projects or my python projects
(11:52) that i create using pycharm will be created in one location and here you also see that python version 3 that we installed is automatically being used for this project which is exactly what we want and you see it says base interpreter and python interpreter is basically a program that knows how to execute python code it will know how to interpret or translate our python code into instructions that computer can understand so with this configuration we don't have to change anything we're gonna create our project so first
(12:30) of all i'm going to make all this a little bit bigger so that you can see the menu here on the side and the code a little bit better so in preferences editor font we're going to set the size to 20. if i apply this right here you see that this code editor font basically got bigger and i also want to increase the size of this menu font here so in appearance i'm going to set it to maybe 18 and there you go so basically everything is bigger now so you can follow along and see exactly what i'm typing
(13:15) and also another note here if you want to configure your theme basically so if you don't want it to be dark or maybe you want some other color scheme then you can select it here in appearance you have four themes available let's actually try this one out and apply and there you go you have a different theme i actually prefer this one so let's leave it at that so as you see we have a very simple project with one main main.
(13:51) pi file the extension is for python files which basically contains very simple code and we're gonna basically just remove all of these and start from a clean python file state and in the next section we're gonna dive right in and write our first simple python application we're gonna start with the simplest example in python to basically learn python syntax and get started as simply as possible so first of all we're gonna write a very simple application that just prints some output and in python when we want to print basically display results of what we
(14:36) wrote we use this syntax where we say print and here we can pass in basically whatever we want to display and now if i want to see whether this super simple application works i can run it or execute it with this triangle here and i have the output so the basically the output is displayed or printed right here and i see the output is 1.
(15:03) i can display some other values like 200 and run it and there you go let's say we want to display some text basically whatever some sentence and again triangle and we have that output here right so again very simple example of writing python code that basically displays some information when we execute it one thing that i want to note here is you see that we write some code basically in this window right here so in our main.
(15:46) pi file and when we run it or execute it our code we see some display in this window so you may be wondering what is this window and why do we see some output right here the answer to that is that whenever you're working with tools like pycharm which basically have all the functionality that you need to write your code and then execute your code you basically have everything in one place so whatever we write we can execute or run right away now without such tool how would we write code and how would we execute that
(16:26) code and this will help you understand what's going on here and to show that i'm going to go back to my terminal and i'm going to create a new file and i'm going to call it test dot py we're going to write the same code basically in this file you can do it in a file editor i'm just doing it directly in the command line and save it so now we have the same identical file as here but not inside our code editor right not inside this pycharm tool and we have python 3 available locally so now how do i actually execute a python
(17:17) file outside this pie chart i can do that using python 3 test dot p y and if i do that i get the same output in the command line so basically what you see right here this whole thing is integrated so basically all in one place where you can write your code the editor right here where you can navigate your files in your project so basically this is just a folder on your laptop and you can navigate the files here and you have the execution environment at the same time so you have to go to terminal and execute python 3
(18:03) whatever you have everything in one place and tools that provide you with this type of environment for different programming languages for python it happens to be pycharm these are called ides which stand for integrated development environment integrated because you have everything in one place so you don't need to use terminal but in addition to this integration you get more cool features which helps you in writing python code for example syntax highlighting highlighting errors or code suggestions autocomplete
(18:40) suggestions and we will see those cool features actually also throughout this course so basically just makes your life as a developer easier however it's good to understand that connection between executing your files on the terminal when you don't have such a tool versus executing and working on your application inside that tool awesome so let's get back to our code editor a file where we write our code and till now we have done something really simple like print a text basically and print a number right and this leads to
(19:23) the first concept in programming languages which are data types so in python just like in any other programming language you have data types for text and numbers the text data types are called strings so everything within the double quotes is basically a string but note that in python you can also use single quotes for strings so double quotes or single quotes they both work the same and there's actually no difference between them and for numbers we actually have different data types so for whole numbers like 2 20
(20:02) but also 0 and negative numbers as well we have a data type called integer and that's also how it's called in most programming languages however you also have numbers for currency for example how much a product costs right so if you have an online shop you would have prices like this for example so these are basically numbers with precision this could also be for example when you're shipping something you could have a weight of a package that is also not a whole number but has a precision so this type of numbers
(20:37) in python and many other programming languages are represented as float data type so again you have integers and float data types and if we execute that you basically see all of that printed as we wrote them now obviously printing values like numbers and text like this doesn't make much sense unless we're getting some useful information from our simple program right here right so let's do something more useful with python now let's clean all this up and let's say we want to do some calculations very simple logic that
(21:24) basically calculates how many minutes there are in 20 days so we have 20 days which have 24 hours per day which have 60 minutes per hour so this line will give us basically calculation of minutes for 20 days and there you go that's our number now this makes a little bit more sense because now we have a program that actually does something for us so basically as you see you can do any math operations on numbers in python and again in many other programming languages you can do plus minus division whatever just like you know it from basic math
(22:09) however i want to note right here something that many people think about programming and maybe are misinformed about which is if you're doing web development or maybe devops automation with python and not something like data science or data analytics this is probably an example of the highest math knowledge that you need for programming in python because even though we're going to use some calculation examples because they're just good as examples to show you the basic concepts of python you do not really need any advanced or even
(22:49) intermediate knowledge of mathematics when programming because it's really not about meth however what you need is logical thinking and we're going to be doing some of that and see that as examples so just bear that in mind in case you are misinformed about that so back to our example we have this number that is displayed here as a result however maybe if we use this program we don't remember or we don't know what this number stands for if somebody else is using so we want to add some descriptive
(23:27) information about this number that says this is how many minutes there are in 20 days so basically we need a line that says 20 days are this many minutes and this should basically be exactly this calculation right here so how do we put this calculation basically right here in the middle so that we end up with this whole phrase displayed right here so how do we combine text and numbers basically or calculation of numbers and in programming languages again this is not specific to python we would do that using something called
(24:11) string concatenation and string concatenation is basically a fancy word for gluing together or combining multiple strings now how does the syntax for that look like we combine the strings using plus sign so apart from adding numbers obviously using plus plus is also used in programming for combining multiple strings so in our example we have three string values and we want to put them all together in one string or one sentence we have the first string 20 days r and then we have the second string minutes and in the middle the third
(24:51) string which will be the value of the calculation however if we just put a number here python interpreter tells us it's not a string it's a number so we need to turn it into a string other programming languages do that automatically in python we need to do that explicitly so we need to tell python take this number but not as a number but as a string and we do that using a syntax that looks exactly like that so basically we have a non-string value but we're telling python we want it as a string because it needs to be printed out as a
(25:34) text basically so if i  execute this line let's see what happened and there you go we have our output just like we wrote it here but you see that there are no spaces around so basically 50 is just really glued together without any space around and how do we put spaces around these 50 basically add a space here add a space here now why does that work because this whole thing for python is a string again because we are putting it within these quotes so basically any character that you see on your keyboard right now
(26:14) if you put it between those quotes is interpreted by python as a string including this space character right so if we execute it again we have spaces around 50 and our sentence our phrase looks fine and if you're thinking right now this is actually kind of annoying because first of all it looks ugly and also there's a high chance you're gonna forget it that is absolutely right so in python again specifically there is a way to do it in a more elegant way using a different syntax and the more elegant syntax
(26:56) for that let's actually close this is print and let's write that again and instead of having these plus we have curly braces and we write our number inside or whatever non-textual value and at the beginning right here basically before we start writing a string which starts with quotes we just write the letter f and you see the syntax highlighting as well basically sees that this is not part of the text this is non-text value and if i execute it i should see the same output from the second line and this is really
(27:44) a way cooler way to write this instead of using plus but this is something very common and also something that you would encounter in most programming languages so just important to know that this is a syntax for string concatenation as well so we can basically just remove it and use this syntax for our examples and also note that this syntax is actually a new addition to python so it only works if you have a latest python version in our project if you remember we actually configured and chose version 3.
(28:23) 9 and that's why it works for us if you use python 2 for example python version 2 this syntax is not going to work for you we can actually demonstrate it so i'm going to copy that line and i'm going to change our test.pi and now if i execute it using my python 3 you see it works fine if i do it with python which is version two point something let's see what happens there you go syntax error invalid syntax because python version 2.7.
(29:16) 10 so older version basically doesn't recognize this syntax so just be aware of that so this syntax actually only works for python versions starting from 3.6 so everything below that every python version basically will not recognize this syntax as we see right here so again back to our code and now we just have a number here but what we actually want is the calculation for getting the correct result right so we want again 20 days in hours and then in minutes and if i execute it you see that the calculation was done and here we have the full complete sentence with the
(29:59) result in it and if you're curious this f actually stands for format so this is basically formatting our text or our string in a correct way awesome so we have this line of code here that basically calculates for us how many minutes there are in 20 days let's say we want to do the same for 35 days right what we can do is basically copy that line and replace the values for 20 with 35 and if i execute it i get the same calculation but for 35 days and we can do that basically multiple times for different values so let's say we
(30:48) want it for 50 days and we want the same calculation for i don't know let's say 110 days doesn't really matter and we have obviously different number of minutes for each of these values and now let's say we wrote this program it's ready and we're using it and at some point we decide you know what i want this program to actually calculate how many seconds there are for these provided days instead of minutes so what we would need to do in that case is basically change the calculation in all those four lines
(31:28) so instead of minutes it should actually calculate number of seconds in a day right so we have the hours minutes and seconds and we would have to change the text as well here and we would need to do that for each one of those lines right so we would have it here like this and again if we need to modify this for hours or milliseconds or whatever we basically have to do these changes multiple times right even though if you actually look at that this is the same exact calculation for each line that doesn't change right if you want
(32:08) seconds then this is the calculation that you need to do so how can we actually avoid repeating the same calculation and the same text in our code and the answer to that is variables so in programming languages we have variables that basically hold values that will repeat throughout your code that you can set once and use it in multiple different places so instead of basically repeating this calculation four times we basically do this calculation once like this and we basically save this value in a variable so that we can use it
(32:54) whenever we need right and the way that variables are defined in python is variable name let's call it two seconds equals and whatever that value is that repeats itself and that we want to save into a variable now i want to make two notes here regarding the variables in python first of all in python defining or creating a variable and giving it a value like this syntax for that is actually very simple compared to other languages because you just have the variable name and the value in many programming languages you actually have to define
(33:40) here some kind of data type for that variable for example if it's a number like float or integer or string etc in python you don't have to define that you just have name of the variable simple as that the second one is the naming convention or standard for the variables so we have two words for example if we name our variable calculation to seconds right we have actually three words here so variables that are descriptive so basically they tell you what this value actually is about so they have multiple words in them you can separate them
(34:18) using these underlines again in different languages the naming for variables can be different in python this is actually one of the standard ways of defining variable with underscores which i find pretty nice and easy to read so we're gonna use this syntax basically throughout the course it will be totally and absolutely okay if we wrote it like this or if we used capital letters instead but again this is probably the most readable form and this is what we're going to use now here note that we can decide whatever name we
(34:55) want to give our variable but in python there are some specific words that have special meaning to python these are called reserved words so you can't use these words as variable names and we will use some of these reserved words throughout the course so you will see some examples great so we have our variable defined here and this is the value that this variable gives us so how do we replace now these repeating values with this variable so we're going to delete that and again inside we're simply going to copy
(35:34) the name of the variable so let's execute and as you see we have our value printed just fine and we're going to do the same for all those values and again execute everything works just like before now you may be thinking if we change this to minutes we would have to change the variable in all these places so that's our case we can basically just rename our variable something more generic so let's say calculation to units and this could be now any unit that we want second meaning it doesn't matter
(36:20) and this is exactly the advantage of variable because you can name it whatever you want which basically just describes what this variable is about and now you won't have to change that again and we can also replace this one here accordingly since it's a text we can call it a name of unit we can also call it unit doesn't really matter we're the ones deciding what that variable name is and once we have that variable we can now replace it here how do we do this because this is actually part of a text a string the same way we
(37:00) did right here we're gonna delete that and create an expression create a syntax that basically tells python hey this is not a string this is a non-string value and you already know this could be either number or variable itself and so we're going to use the curly braces and the name of the variable and just like that we have substituted these values here and if i execute it works perfectly fine and we can do that in all four lines and our code is still working and this syntax right here with this format at the beginning basically prevents us
(37:48) or avoids basically saves us from having a bunch of plus signs here and then space characters etc this all looks way elegant now and now if at some point we actually decide you know what i want this program to calculate how many hours there are in the given days instead of seconds and we want to change the program to do that we could basically just change the calculation here and instead of seconds we have hours and if i execute there you go we see the changes right away so this is why when you're programming doesn't matter in which language
(38:31) including python using variables will be probably some of the most frequent thing that you do because you always have values that are repeating themselves and you want to write clean code so you create variables and one of the best practices when creating and using variables is as we're using actually here is to name your variables so that you later and also other programmers who are working with you understand what this variable actually  does or what type of value it actually has because if you just look at 24 you would probably not know
(39:08) what this 24 is about right but with variable you actually know that this actually represents a number that is used for calculating units right it could also be more descriptive like units for days but generally another advantage of variable is to basically describe that value as well that you're using in your code now another thing you probably also noticed is that even though we're using variables here so that we don't have to change those values in four different places a lot of these four lines are actually pretty
(39:48) similar the only difference in those four lines are actually these numbers right here everything else is exactly the same so what if instead we wanted to make this code cleaner and basically avoid this type of duplication in our code right so for example if we did this for 10 different values we would have the same line this long line basically 10 times right so how do we avoid this type of duplication so right here we actually avoided duplication for specific values right piece of string here a whole calculation here but how do we
(40:28) actually avoid duplicating a whole line right the whole piece of code basically which has multiple different stuff in it not just a value and we do that using functions so functions are basically blocks of code like this right or basically logic in code that does something it's not just simply a value but actually does something more complex that is again used in order to avoid repeating the same logic or most of the same logic in your code so how do we create functions just like we created variables here we create functions and the way we do
(41:10) that is using following syntax right here let's create our first function we start with def so we define a function just like we define a variable but for function we need this keyword basically called def and now we can give our function a name just like we gave name to our variable we can give our function a name and here we can use the same standards like for variable we can name the function something descriptive something that actually says what this function does and let's call our function days to units and then we have the brackets
(41:53) and a column so this line basically defines a function it tells python hey whatever comes after this is actually going to be a block of code that is going to be referred to or is going to be named these two units and how do you write a function i'm just going to copy this one actually here and let's give us some space and again this is very specific to python we need to indent here with spaces and i'm going to paste in what i copied inside these two lines basically tell python this piece of code or this line of code
(42:36) because we just have one line here belongs to a function called these two units and again we just have one line but this could be function with hundreds of lines right so i can write whatever i want the next line all good and then i can do some calculations and i can basically write whatever logic i want here and all these will belong to this function so now this logic is inside a function that is called these two units and we can actually get rid of this and test our function and here if you noticed we have this yellow line under the
(43:22) function name that's actually a warning for our code style it says we need two blank lines before so pycharm has a built-in official style guide for python that tells you how to style your code or how to write your code correctly now why is code style important well just like you write code you need to read code from other developers or your own code to understand what the code is actually doing so it's important that code is easily readable and this is just another example of how an editor like pycharm
(43:57) helps you to write code so to fix the warning we're just going to add a new blank line before the function definition so now what happens if i execute this block of code i have the variables defined here that i'm using in the function and then we have these two print statements so what happens if i execute now and as you see in the output here there is no output right nothing actually got printed so what actually happened because we have those two print statements that we defined in the function but we don't see anything in the output
(44:36) and the way it works is whenever you create a function or define a function like this you actually have to use that function right again this is a similar concept to variables we have created variables here and we're using that variable in our code the same way we create a function and we need to use that function how do we use a function or in programming languages it's called calling a function or executing a function and we do that using the name of the function like this and as you see in the suggestion as well
(45:13) using brackets like this so this syntax here basically is what we call calling the function that we defined right here or using that function so now if we execute it there you go you see that those two lines got executed and we have the results here so we're creating variables and we're using that here we're creating a function and we're using that function here and note the difference between using a variable and using a function python knows this is a function because we are providing these brackets at the end right that tells us
(45:52) we're making a function call basically but as you see now we have these 20 days so this only works for 20 days right what about other values that we had what about 35 days and 100 days we haven't de-duplicated that right we have just one case here so how do we use functions so that everything else except for these two values right here actually stay the same and we do that in programming by giving our functions some kind of input value which are also called parameters so instead of having this 20 basically
(46:37) here hard coded as we said here and here we provide that value of 20 or 35 or whatever that value is basically whenever we use the function so we are telling python use these days to units function with a value of 20 or use that function with a value of 35 and way we define this input parameter in functions is very simply by defining this parameter between those brackets right so this is where the input we as programmers define the input parameters so right here how do we define that using our already familiar variables so basically right here i'm
(47:25) going to define a variable and i'm going to call it whatever i want i'm going to call it days or number of days but i'm not assigning a value to that variable right like i did here because i want it to be assigned whenever i use the function so this basically tells python that a function these two units can be used using one input parameter which is called num of dates right number of days so now the last part which is remaining is replacing these values using this variable right and just like we do it in these two
(48:08) places where we're also using variables defined here exactly the same way we're gonna remove this and define a block for non-textual value and we're gonna put our variable num updates here and also here so you see now that our function actually doesn't have any fixed numbers in it instead we're using variables we're using two variables that are defined outside that function and we're using one variable that is defined within that function right this variable actually belongs to that function
(48:52) and now as you see whenever we want to use that function we're telling python hey call this function called days to units with a parameter an input basically of 35. so now if we execute it by the way we can also do it here you see 35 days are and the calculation was done here and hours and now if we go back to our previous example where we wanted to calculate these for four different values right for different number of days we can actually do the same so we had 20 then we had 50 and we had 110 right so this basically gives us exactly
(49:40) the same logic that we had previously but with different syntax right so you see the difference that instead of having this basically four times we have much cleaner syntax where we actually see what this logic is doing which is days to units and then we have the number of days that we pass or give our function as parameter and if i execute this you see that it was printed four times for all different values we can actually remove this line and now if we make some change in our function for example we change the
(50:24) name of this variable we want it to be hours instead of units we just do it once in one place and that's basically it so whatever changes we make inside that function and that is actually the big advantage of using functions in code whatever change we make inside here it doesn't affect how we use the function because for using the function we only need the name of that function and the input parameter now probably you're wondering what happens if i do not give my function a value let's delete those lines and let's say
(51:05) we do not provide any value here and we try to execute or call our function without the parameter and let's execute and you see that python interpreter is complaining because we have told python here is a function called these two units and whenever i want to use that or my colleague another programmer wants to use that function they have to provide an input value here right so now whenever python sees the usage of that function and there is no input parameter that we are giving that function it cannot execute that function right because
(51:47) basically this value is missing here right and that's why we get an error which also says missing one required argument so as you see whenever we define a function with a parameter with input parameter weo this syntax here basically is what we call calling the function that we defined right here or using that function so now if we execute it there you go you see that those two lines got executed and we have the results here so we're creating variables and we're using that here we're creating a function and we're using that function here and note the difference between using a variable and using a function python knows this is a function because we are providing these brackets at the end right that tells us
(45:52) we're making a function call basically but as you see now we have these 20 days so this only works for 20 days right what about other values that we had what about 35 days and 100 days we haven't de-duplicated that right we have just one case here so how do we use functions so that everything else except for these two values right here actually stay the same and we do that in programming by giving our functions some kind of input value which are also called parameters so instead of having this 20 basically
(46:37) here hard coded as we said here and here we provide that value of 20 or 35 or whatever that value is basically whenever we use the function so we are telling python use these days to units function with a value of 20 or use that function with a value of 35 and way we define this input parameter in functions is very simply by defining this parameter between those brackets right so this is where the input we as programmers define the input parameters so right here how do we define that using our already familiar variables so basically right here i'm
(47:25) going to define a variable and i'm going to call it whatever i want i'm going to call it days or number of days but i'm not assigning a value to that variable right like i did here because i want it to be assigned whenever i use the function so this basically tells python that a function these two units can be used using one input parameter which is called num of dates right number of days so now the last part which is remaining is replacing these values using this variable right and just like we do it in these two
(48:08) places where we're also using variables defined here exactly the same way we're gonna remove this and define a block for non-textual value and we're gonna put our variable num updates here and also here so you see now that our function actually doesn't have any fixed numbers in it instead we're using variables we're using two variables that are defined outside that function and we're using one variable that is defined within that function right this variable actually belongs to that function
(48:52) and now as you see whenever we want to use that function we're telling python hey call this function called days to units with a parameter an input basically of 35. so now if we execute it by the way we can also do it here you see 35 days are and the calculation was done here and hours and now if we go back to our previous example where we wanted to calculate these for four different values right for different number of days we can actually do the same so we had 20 then we had 50 and we had 110 right so this basically gives us exactly
(49:40) the same logic that we had previously but with different syntax right so you see the difference that instead of having this basically four times we have much cleaner syntax where we actually see what this logic is doing which is days to units and then we have the number of days that we pass or give our function as parameter and if i execute this you see that it was printed four times for all different values we can actually remove this line and now if we make some change in our function for example we change the
(50:24) name of this variable we want it to be hours instead of units we just do it once in one place and that's basically it so whatever changes we make inside that function and that is actually the big advantage of using functions in code whatever change we make inside here it doesn't affect how we use the function because for using the function we only need the name of that function and the input parameter now probably you're wondering what happens if i do not give my function a value let's delete those lines and let's say
(51:05) we do not provide any value here and we try to execute or call our function without the parameter and let's execute and you see that python interpreter is complaining because we have told python here is a function called these two units and whenever i want to use that or my colleague another programmer wants to use that function they have to provide an input value here right so now whenever python sees the usage of that function and there is no input parameter that we are giving that function it cannot execute that function right because
(51:47) basically this value is missing here right and that's why we get an error which also says missing one required argument so as you see whenever we define a function with a parameter with input parameter wehave to also provide that input parameter another thing that you may be also wondering is what if i want to provide multiple input parameters to functions how do i do that it's actually very simple you can do that by simply defining here another input parameter separated by comma and let's say we want
(52:24) to pass here something that we want to print out additionally like a custom message doesn't really matter and the same way exactly the same way as the first one we can actually use it in here we can even create a new line and basically just print out that message right and note that if you are using a variable without stream so basically it's just the variable itself we're not using any text in that case you don't need this format right so you can basically just print it out directly and now again we have told python
(53:02) i have this function and two input parameters are required so i also need to pass to input values whenever i use that function so now let me just pass in some custom message let's say i'm happy about the calculation or i know i'm going to be happy so let's say awesome and let's do another calculation and this time i say looks good and if i execute it you see that i get awesome the first time and then for 35 i get looks good so you can basically define and provide as many input parameters as you want common
(53:47) practice and also what you will see in just normal code basically is just a handful of input parameters maybe one or two so it's not actually overloaded with 10 parameters cool now that we know functions and variables why they're used or why are they useful and how we use them there is one point that i want to mention which is variable scopes in functions what does it mean as i mentioned previously in this function we're using multiple variables right we're using two variables that are part of the input right that
(54:29) we provide when using a function and we're using two variables that are defined outside the function right somewhere else in the code so variable scope basically means where is the variable that function uses defined and variable has a global scope for a function if it is defined outside the function like these two variables right here could be completely in a different file not even in the same file where the function is so these are global variables so all the functions that you have in your python code can use those global
(55:06) variables and then you have local variables local variables are variables that are created within that function right so these two variables are basically only available inside that function because it was created within that function so internal scope and global scope so that means that when we create another function let's call it scope check because that's what we're going to do we want to test the scope in this function i can access the global variables like name of units but i cannot access the internal
(55:57) variables like number of days and let's actually test that so i have num of units which is a global variable defined here outside the function and the second one i have a variable that is defined inside another function right so as i said internal and as you see right here we already get a red line underneath that says unresolved reference num of days so for this function basically that variable is not visible it's not accessible it doesn't exist basically at all and we can even test it out actually so again if we want to see the results
(56:43) we have to actually use that function like this run the function and if i execute it you see that we get an error that says name num of days is not defined right it doesn't know that there is a function like that anywhere in code however it does recognize the global variable and that means that variables defined outside function itself global variables are accessible to all the functions and if you have variables defined inside the function then they're only accessible for that specific function and not for other ones and that means
(57:22) actually that if num of days variable does not exist for scope check variable we can actually create a variable inside scope check with the same name and we would have basically no problem at all so this is not going to be a duplicate because this function doesn't know about this variable the number of days here and scope check doesn't know anything about variable num of days right here and if we want to use that function now we have to put provide the value let's do 20 and if i execute there you go you have name of units and
(58:02) the 20 that we provided so global variable local variable defined here another interesting thing is that as i said inside the function body so to say so this is basically whatever is part of the function right in this indentation is called function body so we can create whatever logic we want inside that function body so whatever i can do in python generally i can do inside the function body so one of those things is actually creating variables right just like we created variables here we can create variables here like this let's call it
(58:45) myvariable and variable inside function and we can print that out as well so now we have three types of variables that we are using in this function we have a global variable we have internal variable that is passed in as a parameter and we have internal variable again that is basically defined so the variable isn't provided when we use the function but it's basically just defined inside the variable and again if i execute this see hours num updates and variable inside function text printed out like this and obviously this is just for
(59:38) demonstration but we're going to see more realistic examples of that in our projects so i'm going to clean this up and we can move on to the next concept so now let's go back to the example where we calculate number of hours and we do that for four different values now if you want this application to be really useful for us or somebody else it doesn't help that we have to fixate here just four different values right the application should be able to take any value that we basically fit it right so we should be able to
(1:00:18) provide any number of days and the program should calculate the number of hours in those days so what we need here is user input so when we give this application program to somebody else or use it ourselves it should allow some user input so how do we write a program that asks for and accepts a user input and then does something some kind of calculation some kind of other logic based on that user input accepting a user input from a python application is actually pretty easy let's get rid of all of these lines
(1:00:58) first and we can do that by writing input and this will basically give a user a prompt to enter some input value now you probably already see from the syntax that this looks very much like using our days to units function right in this case with the parameter so input is actually a function that python provides us with so we didn't have to write this input function right we wrote the days to units function but input function is available in python so that we can use it whenever we want and this parenthesis here tells python
(1:01:43) we want to call an input function and we're calling it or using a function without a parameter so now we know that we can write functions ourselves for logic that we need but python has tons of functions that python developers already wrote and is part of python and we can use it in our code so that not everybody has to write their own input function logic and the code or the functions that python provides are again part of this python that we use in a project and obviously if you're using the latest version
(1:02:23) of python you will get the latest code and latest functions that python basically provides so back to our function execution and let's see what happens when we execute this program i'm going to run it and in the outputs you actually do not see anything other than my cursor is blinking here so it's actually waiting for user input so i can actually type in something here so i can do 20 and enter and process finished with exit code so i was able to input something doesn't really matter it could also be a string actually
(1:03:08) doesn't really matter and program basically finishes so that's the simplest usage of input however as you noticed here running this program and basically having this blank output here is a little bit confusing so if another user is using our program they will probably be wondering what's happening here so what we can do is in input function we can provide a parameter that actually tells a user something right like enter a value for number of days or something similar so that it's not just a blank prompt right so we can do that by
(1:03:52) passing in a parameter a string which is going to be our message so we can do a user enter a number of days and i will convert it to hours and here you see right now that the program wasn't finished because we didn't enter anything so this program finished line wasn't output yet and that means the program is still running it is still waiting for our input and in pycharm in this ide if you want to terminate the program manually yourself you can click this stop button and as you see process finished so
(1:04:40) now we can run the program again and as you see here we already have a message that we're displaying to the user so that they can enter the hours right and here we can provide our input 30 and there you go however this doesn't look nice here we actually want the user to get a prompt on the next line how do we do that as part of a string we can actually add a new line or newline character basically and that in programming is actually represented by backslash n and you see a special highlighting for that one now
(1:05:23) let's execute and you see that my cursor is on the next line now and again let's provide a value enter and program ended so we have now a more user-friendly way of asking program user for their input instead of just showing an empty prompt and we're getting user input now we're not doing anything with that user input right that input basically just finishes the program and that's it we're not doing any calculation for that input so how do we use the value that user enters here when input function gets executed we do
(1:06:04) that and this is a very important concept by assigning whatever result this function usage gives us which is in this case user input assigning that result to a variable so right now it's basically executed and it's just wasted right it just disappears so instead we want to save that value that entered input value in a variable so that we can access it later and we do that by let's call it user input variable equals so just like we created variables here with variable name and a value right or even an expression right if we did a
(1:06:47) calculation here that will be basically a whole expression whole calculation the same way we can use values that function execution gives us to assign it to a variable so now what i'm going to do is i'm just going to print the user input so that we can see what value that user input variable has so let's execute again it asks for our input let's put 20 and print user input gives us 20.
(1:07:20) so user input variable value basically becomes whatever we provide as an input now that's a new concept and it could be a little bit confusing so let's see another example with our own function what would happen if we assigned value of this to a variable we get a warning as you see here in the editor which is one of the great things about ides that it basically gives you warnings when something is not correct and the warning says function doesn't return anything so basically if we want to have some value
(1:08:05) as a result of function execution we have to return some value in the function and how we do that instead of printing the value right away we can actually return that value using return keyword again you see special highlighting here just like here because return is a special word that python understands that you want to basically give back a value this value right here as a result of using the function right so you could have some logic here doing the calculation whatever and then as the last line you can return
(1:08:48) that calculated value and now the warning is gone because we're actually returning something from the function and when we return value from a function again we can assign it to a variable so that we can use that value whatever function returned by referencing the variable and one of the usages will be basically just to print it just like we did before like this let's delete it temporarily and test our program and there you go you see that this function got executed with input 20 this text this display text basically
(1:09:33) was put together in the function and was returned or was given back as a result and we saved that this whole string basically this whole sentence in a variable called myvar and when we print that myvar we see that value printed out here and again if we enter some other value we would get different text and again that is actually a very important concept of giving back some results from a function execution and you saw in our examples that you can have a function that doesn't return a value just print something on
(1:10:09) maybe does something else or function that returns some value you can have both types so back to our example of user input so now hopefully it makes sense that input function returns whatever value the user entered as a result and we can save it in a variable and then access it later again let's get rid of this line and now let's actually do the calculation on the user input number of days how do we calculate number of days very simple by calling our function that actually does that so we're going to call our
(1:10:53) function to calculate the number of hours for an input and the parameter that we passed in is going to be whatever the user provided so instead of basically hard coding a value here ourselves we give it a value that user provided instead so the num of days will be the user input and now again because this function returns the whole string it doesn't print it remember it just returns it so when i execute this and i provide in some value that's to 200 you see that i don't have any output here because we
(1:11:33) didn't print anything we basically just returned the value here we didn't do anything with it so the last piece missing here is to display the text the string that function returns so we save that return value first let's do calculated value so we save this thing in calculated value variable and finally we can print it and now let's execute it and let's see what happens i'm going to type in 10 10 days and let's see what we get now and you see we have this weird value here as a result of the calculation so what
(1:12:18) exactly happened so this part of calculation basically which represents this number didn't do a proper calculation and the reason for that is because the input value that we get with inputs function is always treated as a string and not a number so basically at this place here number of days inputs 10 here is actually treated as a text and not a number and where this weird result comes from is basically number 10 printed out 24 times so instead of doing the actual calculation 10 times 24 10 is printed 24 times and that's what
(1:13:02) happens when this is interpreted as a string so how do we make python see that number see that input value as a number as an integer and not a text or not as a string and it's actually pretty easy to do on the next line the user inputs again we saw right here it is a string so we have to make it into a number and we're going to do that using int and user input and that process of turning a value from one data type into another is called casting if you remember we already saw an example of it when we turned
(1:13:43) a number into a string in the string concatenation example again from the syntax you should already know that this is a function call so we're calling a function called int again that python itself provides us with because we didn't write that function and we're passing in one parameter which is a string and we should get an integer from that string as a result and we can save that number into a variable and let's call it user input number and now we have 10 as a number instead of as a string and instead of passing in that string
(1:14:22) user input we can now give our function number that it expects let's save it and execute let's put in 10 and there you go now the calculation is correct what i want to show you now is how this user input actually works without a code editor like pycharm so i'm gonna copy all this code and let's go back to our terminal and in our test dot pi i'm going to paste in our code and save and let's now actually see how the user input works when we execute it in a simple terminal window and as you see here we have the message first
(1:15:15) and the prompt is right here so we can enter a value let's do 25 enter and we have a result 25 days are 600 hours great so our program is working it is converting the number of days to number of hours and accepts a user input now what happens if a user enters an invalid value here so for example instead of a positive value for number of days maybe they enter a negative value like -10 for example and obviously that input value doesn't make any sense but we are still calculating and giving a value right and
(1:16:03) this is another important concept in programming generally that when we allow users to give our program some input value we also want to restrict them and basically validate that what they provided as input is a valid value for our program specifically one that it makes sense like in our case -10 program still does a calculation but it doesn't really make sense and second it doesn't crash our program right so now let's see what happens if we enter some text here you see that the calculation didn't happen
(1:16:45) because we basically crashed the program application using that invalid user input does make sense or an input that crashes our application because the calculation isn't even possible and we want to avoid users basically either providing a nonsense value or a value that will crash our application so we need to validate user input and this is again important concept in program because whenever you allow user input you always have to validate it so in this part we're going to learn concept called conditionals and we're
(1:17:24) going to learn this concept with an example of validating a user input so where are we going to do the user input validation we can do it in our function right before we actually do the calculation we can first validate is it a positive number and not a negative one so user gives us their input we convert it to a number and then we pass that number to our function so negative 10 positive 10 that is a number basically will be passed on to our function and right here we can check whether this variable value here is a negative number
(1:18:10) or not how do we do that we do that using if else conditional statements so very simple and intuitive to understand we say if number of days is greater than 0 means it is a positive number then we want to do the calculation and return all of this but you see that we have a red line here so basically whenever we use if condition we have to have a proper indentation so all of this line basically goes indented for this line kind of the same way as we indented the whole function body inside the function whatever logic and whatever code is
(1:19:00) right here indented below the if condition will be executed if number of days is really g was put together in the function and was returned or was given back as a result and we saved that this whole string basically this whole sentence in a variable called myvar and when we print that myvar we see that value printed out here and again if we enter some other value we would get different text and again that is actually a very important concept of giving back some results from a function execution and you saw in our examples that you can have a function that doesn't return a value just print something on
1:10:09
maybe does something else or function that returns some value you can have both types so back to our example of user input so now hopefully it makes sense that input function returns whatever value the user entered as a result and we can save it in a variable and then access it later again let's get rid of this line and now let's actually do the calculation on the user input number of days how do we calculate number of days very simple by calling our function that actually does that so we're going to call our
1:10:53
function to calculate the number of hours for an input and the parameter that we passed in is going to be whatever the user provided so instead of basically hard coding a value here ourselves we give it a value that user provided instead so the num of days will be the user input and now again because this function returns the whole string it doesn't print it remember it just returns it so when i execute this and i provide in some value that's to 200 you see that i don't have any output here because we
1:11:33
didn't print anything we basically just returned the value here we didn't do anything with it so the last piece missing here is to display the text the string that function returns so we save that return value first let's do calculated value so we save this thing in calculated value variable and finally we can print it and now let's execute it and let's see what happens i'm going to type in 10 10 days and let's see what we get now and you see we have this weird value here as a result of the calculation so what
1:12:18
exactly happened so this part of calculation basically which represents this number didn't do a proper calculation and the reason for that is because the input value that we get with inputs function is always treated as a string and not a number so basically at this place here number of days inputs 10 here is actually treated as a text and not a number and where this weird result comes from is basically number 10 printed out 24 times so instead of doing the actual calculation 10 times 24 10 is printed 24 times and that's what
1:13:02
happens when this is interpreted as a string so how do we make python see that number see that input value as a number as an integer and not a text or not as a string and it's actually pretty easy to do on the next line the user inputs again we saw right here it is a string so we have to make it into a number and we're going to do that using int and user input and that process of turning a value from one data type into another is called casting if you remember we already saw an example of it when we turned
1:13:43
a number into a string in the string concatenation example again from the syntax you should already know that this is a function call so we're calling a function called int again that python itself provides us with because we didn't write that function and we're passing in one parameter which is a string and we should get an integer from that string as a result and we can save that number into a variable and let's call it user input number and now we have 10 as a number instead of as a string and instead of passing in that string
1:14:22
user input we can now give our function number that it expects let's save it and execute let's put in 10 and there you go now the calculation is correct what i want to show you now is how this user input actually works without a code editor like pycharm so i'm gonna copy all this code and let's go back to our terminal and in our test dot pi i'm going to paste in our code and save and let's now actually see how the user input works when we execute it in a simple terminal window and as you see here we have the message first
1:15:15
and the prompt is right here so we can enter a value let's do 25 enter and we have a result 25 days are 600 hours great so our program is working it is converting the number of days to number of hours and accepts a user input now what happens if a user enters an invalid value here so for example instead of a positive value for number of days maybe they enter a negative value like -10 for example and obviously that input value doesn't make any sense but we are still calculating and giving a value right and
1:16:03
this is another important concept in programming generally that when we allow users to give our program some input value we also want to restrict them and basically validate that what they provided as input is a valid value for our program specificall y one that it makes sense like in our case -10 program still does a calculation but it doesn't really make sense and second it doesn't crash our program right so now let's see what happens if we enter some text here you see that the calculation didn't happen
1:16:45
because we basically crashed the program application using that invalid user input does make sense or an input that crashes our application because the calculation isn't even possible and we want to avoid users basically either providing a nonsense value or a value that will crash our application so we need to validate user input and this is again important concept in program because whenever you allow user input you always have to validate it so in this part we're going to learn concept called conditionals and we're
1:17:24
going to learn this concept with an example of validating a user input so where are we going to do the user input validation we can do it in our function right before we actually do the calculation we can first validate is it a positive number and not a negative one so user gives us their input we convert it to a number and then we pass that number to our function so negative 10 positive 10 that is a number basically will be passed on to our function and right here we can check whether this variable value here is a negative number
1:18:10
or not how do we do that we do that using if else conditional statements so very simple and intuitive to understand we say if number of days is greater than 0 means it is a positive number then we want to do the calculation and return all of this but you see that we have a red line here so basically whenever we use if condition we have to have a proper indentation so all of this line basically goes indented for this line kind of the same way as we indented the whole function body inside the function whatever logic and whatever code is
1:19:00
right here indented below the if condition will be executed if number of days is really greater than zero so let's try that again i'm going to execute it let's put a positive 10 you see 10 days are 240 hours got calculated now let's put -10 as an input and you see none basically no output for us because this line didn't actually get executed for -10 input value now what if we want to tell a user hey this was an invalid value and that's why we didn't do the calculation instead of just showing none we can do
1:19:45
that by returning this feedback message or error message whenever this is not true so whenever number of days is not greater than zero we want to return something else right another message and we can do that using else and the same way as for if we have the indentation and whatever we write here will be executed if number of days is not greater than zero so here we are gonna return you entered a negative value so no conversion for you and here it's time for another special term in programming that greater than
1:20:33
sign is called a comparison operator and we have three of them we have greater than less than and equals and these are called comparison operators because they are used in an operation to compare two values and before in this course we learned arithmetic operations like plus minus divide multiply so again fancy words for simple concepts but these are the official terms for these so now if someone mentions them you will know what they're talking about so now let's execute the application and let's provide -10 and you see that
1:21:11
this line was printed as a feedback to the user so let's go through the flow again user gives us their input in this case -10 we convert it to integer so now it's -10 integer and we pass it on to our days to units function and these two units function basically has this if else statement that's how it's called in programming and our if else statement validates or checks whether this input is greater than zero if it is then the function will return this as a result so basically the calculation with a proper message
1:21:59
else so basically if this is not the case then it will return basically just a feedback message for the user and note that else doesn't have such a check here we don't check num of days is less than zero and the reason for that is because it doesn't check for less than zero because it basically just decides if this is not true else or in that case just do this so we don't need additional check here now this segment right here where we're doing the check is called a conditional so basically we're providing our program
1:22:37
a condition if this condition is correct then do something otherwise do something else and that conditional can be true or false if we enter 10 then this conditional will be true because it's greater than 0 if we enter -10 then this conditional will be negative it's not greater than 0 and those true and false values in programming actually are represented by its own data type which is called boolean and in order to show it to you that this conditional either gives true or false what i'm going to do is i'm going to
1:23:19
print this conditional right before i do the check so for a positive number input this should print true and if it's negative so it's not greater than 0 this should print false so let's test it out first i'm going to provide positive 10 and right here you see true because this condition is indeed true and note that this is not a string that's why we don't need the quotes here so we can basically just put in the whole expression in a print function and now let's do the same with negative 10 and you see
1:24:06
false and as i said true and false values belong to its own data type in programming which is called a boolean and again we can demonstrate that instead of printing it out we can save it into a variable let's call it conditional check and in python there is a function called type which checks or prints out basically a type data type of a variable or a single value so if we pass it so this will give us data type of conditional check and obviously if you want to see that result we need to print it so print the whole thing so it doesn't
1:24:54
matter what we pass in this point and right here you see class boolean so this conditional check here which has a value of true or false is of type boolean now there are two things that i want to note here the first one is that you see that i am calling a function here which is type and then whatever that function type returns which is basically this output here we are printing it so we have two function calls that are basically nested and that is absolutely fine you can nest function calls another example of doing
1:25:37
this nested function called would be for example right here instead of assigning these to a variable and then passing it here we can actually save us that step and in the days to units function call pass it as a value so this is a perfectly valid syntax and you can do that you can nest in the function calls and you would not need this additional step and you can do that as many times as you want it just looks cleaner when you have that syntax a little bit separated and not have two three four function calls nested so that's one
1:26:16
thing and another thing is we just saw a class boolean type here and let's actually see the same output for string and number so just for the demonstration let's actually see the type of string and integer let's get rid of this for a second because we just want to test so we're going to print the type of a string which says this should be a string type and execute and you see class string and now let's provide an integer you see class int and let's provide a float and there you go we have float
1:27:09
so this is a very handy way of checking the type and we're going to need that actually in a later example so back to our application and one note about booleans and conditionals is that you're going to be using a lot of those in programming because they're really the major or the core part of writing any kind of logic in programming so you're going to need if else conditions and statements and booleans in your application so it is a very core concept and we're going to be using a lot of them
1:27:48
in our coming examples so let's get rid of this code right here and one note before we move on here is that the negative numbers are not being calculated because of this condition now what about zero let's actually try that out so i'm gonna enter zero which is actually also valued that doesn't make sense because zero days input obviously will give zero of any units so enter and right here you see a feedback to user that says you entered a negative value so no conversion for you and the reason for that is because this
1:28:30
condition here number of days checks greater than zero which means that negative numbers and zero will not match this condition so they will basically give you this feedback but our message says you entered a negative value right when we entered zero what if we wanted to have a specific message for a user if they enter zero and a specific one if they enter negative value right we want to differentiate between those two how can we do that in the if else statement in programming we can have multiple conditionals so
1:29:08
basically we can have multiple ifs so how do we do that first we check number of days is greater than zero okay great now we want to check whether number of days is equal to zero and we can do that using another if here and in python the syntax for that is el if which basically is a combination of else and if so if this is not true then we want to check another condition number of days equals 0.
1:29:44
now you know the equation sign generally is this one right here however when we're checking whether something equals to something else in programming that equation check is represented with two equal signs and the reason is because one equal sign is already used to represent assigning a value to a variable so not to confuse those two actions in programming we have two equation signs when we want to check whether something equals a certain value and just like here we execute some logic whenever this condition is
1:30:27
true so in our case we want to tell the user you entered a zero please enter a valid positive number so now again to go through this logic flow if the input value is a positive number then function will return the calculation and the message if it's not a positive number then we will check additionally whether it's zero if it's not zero then this is a last condition basically then we know that it has to be a negative number right so let's test this out let's enter a positive number there you
1:31:13
go let's enter zero you entered zero please enter a valley positive number and let's enter negative one and everything works perfectly note that you can have multiple alif's between if and else statements and again note that el if has a condition just like if statement else does not have any condition so this is like the fallback so if everything previously stated all the previous conditions did not match so they were all false basically then this is the logic that will get executed in that case great so we have validated input value
1:31:58
for users and we may feel pretty good about our program because it doesn't calculate anything for values that don't make any sense however we still have a problem what happens if a user enters a text instead of a number so basically anything that is not a number value doesn't really matter basically some text if i enter you see that our program actually crashed and this is actually a user input that we want to protect our programs from because we don't want to allow users to blow up our application right so let's
1:32:38
see what happened it actually says that we provided an invalid literal literal basically means the text itself or a number so basically a value that we entered for int function that's the problem so this function call basically just blew up because in function expects a value which is a string representation of a number so basically ind expects something like this or something like this it doesn't expect my text or some text so our application crashed on some text input now let's see what happens if i provide a number
1:33:22
but a float number instead of integer let's enter 19.99 and enter and you see the same error this function basically returns an error because it cannot convert float into integer as well so we have a problem here that whenever user enters anything which is not an integer our program will blow up so how do we avoid that so basically before the int function gets executed with an invalid value we need to validate this whole thing and stop our program before that happens so we need the validation before int gets
1:34:04
executed and we can do that right here right so before that line gets executed we're gonna do a validation and one way we can do that is using our familiar if else statement so we can say if user input is digit so again from the syntax you know this is calling a function but note that instead of calling the function like this so basically just stand alone we have the syntax where we have the variable dot and then the function name so instead of passing this as a parameter right here in the function brackets we are passing it as a
1:34:50
parameter again but using this syntax right so each digit function will execute for user input as a parameter and again in if we have conditions so this will be either true or false it's a boolean and if user input is digit it's a number basically so basically this will filter out input values that are text so basically they're not numbers and if the input is digit then we want to execute this line and also the rest of our application like this and if it's not true so if the user input is not a digit we
1:35:36
don't want to execute anything in our application we want to stop the execution and want to tell the user this was an invalid input value i'm not doing anything with my program so that it doesn't crash so else if not digit we are telling the user your input is not a number don't ruin my program so now let's actually test it so i'm going to execute and write some text and there you go so user input is digit was evaluated to false so none of these got executed instead the else block was executed and it printed a
1:36:26
message for our user so we basically avoided our application to crash with this check and if we try a proper number it works and if we enter 0 for example the application will get executed and we will get our message from here so our application is more or less protected and we're not allowing for a invalid input number you say not a valid number now we know that in programming there are different types of numbers we have float numbers as well so let's actually see what ease digit function really checks so let's actually try
1:37:16
to provide a float number instead of integer which is not a proper valid input for our program so i'm going to type in 19.99 and you see that each digit is false for a float number so we got the same your input is not a valid number output for float number as well which is perfect it's exactly what we need and now let's actually try to enter a negative number and let's see if each digit function returns true or false i'm going to enter and you see that else block got executed because is digit was false for a negative number
1:38:00
so basically this function filters out a lot of the bad input for us to protect our application from bad user input and that also means that we don't need a check for negative values anymore and by the way in python you can actually have if statement without an else at the end this will work perfectly fine and this could be our application however note that in programming we don't put this type of logic directly like this basically outside a function as a common and best practice we encapsulate most of the logic basically
1:38:49
in functions so as a cleanup for our code we can take all this and put it into a function so right here i'm going to create a function and let's call it validate and execute or something like this and all the logic that i copied will be just simply pasted in that function like this so now we have the logic nicely encapsulated in its own function but as you know when we create a function we have to call that function otherwise nothing happens so we're gonna call it right here we don't have parameters and we don't
1:39:39
have to provide a user input because user input is a global variable so our function has access to it let's actually test it out and it works and let's provide some bad input and it works too so that's actually a proper way of writing code having every piece of logic in its own function with a proper description for the function now as a next step i want to show you also a concept or something that you will encounter very often in code which is nested if else statements and i'm going to show that example by
1:40:26
cleaning up our program a little bit so as you see here we're doing validation in two different places so we're validating user input here but also inside these two units function itself so what we can do is we can put all the validation in one place in this validate and execute function and basically have all the validate logic in here and let the days to units function just do the calculation and not the validation and this way our functions and code will be a little bit cleaner and more logically built
1:41:06
so after we validate that user input is digit we convert it into an integer so right here we have an integer value of the user input so we can actually check whether that integer value is greater than zero or equal to zero and we can do that right here without passing it on to the days to units function and just like this if conditional we're gonna do user input number greater than zero if that's the case we want the calculation to happen so both of these lines will get executed only if user input number is greater
1:41:47
than zero and else in our case if it's exactly zero we want to print a message to user you entered zero and remember we've got the negative numbers already covered using this condition here so that's the one remaining i'm just going to copy that and paste it right here variable is called user input number so we'll fix that and we're going to print out that message so that means we don't need any validation right here we can simply do the calculation so to go through this logical flow of if
1:42:33
else or nested e-files statements we have the first if right here also note that indentations for these if else so basically they are on the same line here same position and the nested if else or in our case alif they're also in the same position so again first that's the big validation the first one is is the user input digit in the first place if not we basically shut down the program we print out a message to the user and that's it if it is a digit then we need additional validation is that digit a positive
1:43:17
number or is it a zero so we do that additional validation using a nested ifall statement and basically this line gets executed only if it is a valid number and if it's a positive number and because of that we don't need any additional validation once the these two units function gets cold and you probably already think and notice that nested if else statements are not the most beautiful thing in the world they are pretty ugly actually and especially we have multiple of them or multiple else ifs in between
1:43:55
the function may actually end up looking pretty bad so it's not recommended to have multiple levels of these nested if else statements in your code to basically just keep it clean but as i said you will encounter it a lot in programs in application code because sometimes you just have to write it like this thing i want to show you here is something called a try accept in python so right here as you see we're validating user input right and then we're executing this part of code only if that condition is true
1:44:37
what if we had logic here where there were multiple places where something could go wrong let's say a function execution could basically just blow up because of a wrong input or even as an example maybe this is digit doesn't actually cover all the use cases so maybe there is a value that user can input that will still blow up our program so instead of checking each such possible scenario using if statements and then doing the actual calculation once all those things have been validated what we can do instead
1:45:17
is basically tell python something like try executing this part of code here and if something goes wrong so if any line any function call or any logic execution fails we want to catch that error and we want to control what happens with that error ourselves programmatically and then catch logic will be accept and we're going to specify what type of value we want to catch basically using this block and the name of that error type is actually what we saw in the output when we provided some text and a float which
1:46:07
is value error so that's the error that we want to catch basically so again we tell python you know what try to execute this block of code here and if one of those lines in that code results into a value error then instead of just crashing the program basically catch that error and print out a friendly message to a user so let's actually try this out and note that try doesn't have any validation like if statement so when i entered some text here int function will actually be called with some text and it will result in a value error and
1:46:56
this block will then handle that error so i'm going to enter and and you see that your input is not a valid number message got printed and the same will work for a float number that also doesn't convert to integer and for a proper integer value it will work fine and again difference between if else statement and using try except is that you can cover multiple such errors with this whole try except block right so you don't have to do the validation specifically and that is especially useful for cases where you can't
1:47:43
really validate something using if condition right if there is a chance that you might miss something in that condition check so basically you just say you know what just try to execute with whatever value and if error happens then i still got it covered and an obvious difference between this if else is that here nothing actually crashes the program the program will still work is just a nonsense value with zero days right and as you see here we have specified an error type but with try except what can also do is you can
1:48:20
basically say you know what i want to cover any type of air i don't care if it's value air or some other type of air let me handle any type of air in this case you can basically just leave it without a specific type you get a warning though that it's too general however this would work and you will be covering all the air cases with it but we can go back to our value error and know that in many programming languages this is actually called a try catch so accept is actually pretty specific for python i personally think try catch
1:48:55
makes more sense because you are catching any error that may happen right here and then basically handling it in the catch block so if you happen to hear or see try catch in other programming languages note that this is the same thing as try except in python one thing that we're missing because we converted that if statement into try except is now we need to validate the negative numbers again because negative numbers will not cause an error in our application so they're not covered by this except block here so let's add back
1:49:31
our previous else block and again if neither of these are true it means automatically would mean that it is a negative number so let's print that message for a user enter negative number no conversion for you so now we got all the cases covered again so let's try that out -10 and there you go now there is one minor problem with our application and that is we can only use it once so basically whenever we type in a value it either calculates it or gives us a message that we provided an invalid value then the program basically exits so if
1:50:34
we want to do a calculation for another value then we have to restart the application provided value and then do the same so that's not very convenient if we want to use that program to basically calculate a number of hours for many different values so basically we want to keep fitting it some different values for calculation because we don't want to restart the application over and over again so how can we actually make the program continue after it's calculated the first value so we want the program to basically just
1:51:11
keep running and accepting our values so how do we do that and we can implement the logic using something called while loop concept of loops in programming is basically you do the same thing so the same logic gets executed multiple times in a loop and how many times that logic gets executed is basically defined in the condition of that loop and the condition could be it should run 10 times or condition could also be it should run until some specific event happens in the application and conditions you already know from if else
1:51:57
statement conditions are basically logic that gives you either true or false so condition is checking some logic and then giving you a result which is either true or false so now the question is how many times do we want this application to run in our case let's say we want to run indefinitely right until we actually stop it from here until we kill the program so it means the condition for that should always be true and for our application we're going to use a while loop which is one type of a loop and very simple syntax
1:52:37
while and while just like if actually takes a condition this is going to be the condition for the loop so basically we want to tell the while loop how many times it should run the logic coming after it and again you know our familiar indentation these two lines should execute in a loop over and over again with some condition right here so how many times do we want the program to execute in our specific case well we want the program to run indefinitely until we actually stop it from here right from our editor so that means that condition of the loop
1:53:21
that decides whether the next lines should get executed or not in our case should always be true because if it's false then the loop will stop right no execution anymore so how can we make sure it's always true we just write true right here and you remember i told you that true and false in programming languages have their own data types well they are also reserved words even though this is just text representation basically you see the highlighting here just like for these other words because python knows
1:53:59
this is a boolean value of true and note that again specifically for python we actually write true with capital t unlike in other programming languages so this will basically be just a string so python doesn't know what to do with it but it recognizes true width capital t so we're telling our loop our while loop the condition is always true so basically run these two lines indefinitely because the condition will never change it's always going to be true and the syntax is probably already familiar to you
1:54:40
we have the keyword just like if or try we can actually compare the syntax to the if statement so we have the while keyword here then we have the condition so this is the same type of condition as this one right here it's just that with us is basically fixed true value here it could be true or it could be false based on the condition and then we have the colon and then we have the indentation for the next lines so all of these belong to the while loop so that's basically it we can now execute the application and
1:55:17
see that our program runs indefinitely so this is the first one let's say we enter 10 awesome we have a result and then we have again the next execution where it's asking for our input again and we can do -10 now it's telling us we provide a negative value but we can enter the value again let's enter some invalid value that should be handled by this value error block execute it's not a valid number and application basically continues so again as you see if you have an application that should continue
1:55:57
running and basically get user input over and over again you don't want that application to be crashed at some point by some bad input you want to catch and handle every type of input so that your application continues to run and if we want to stop it we can basically just shut it off here and process finished now we can do one optimization in our program and this would be to allow users themselves to stop the application using some specific input value so for example when they type in exit for example the application
1:56:45
should stop only for that specific word so it shouldn't run anymore so how can we do that so basically instead of having a condition that is always true we want a condition that says if the user did not input word exit then continue running the program if user entered exit then basically just stop it right so we need to change our condition right here so here we want user input is not exit right so user input is not exit now we didn't learn how to check for not equals something right we have check for equality so we check whether
1:57:33
input number equals zero or if it's greater than or smaller than however we didn't learn how to check for not equals not equals in programming and this is not specific for python is expressed like this so instead of two equation signs we have an exclamation mark and equals and if we want to compare it to a string obviously we type that string in our case it's exit so basically this condition tells our while loop while user input is not exit continue running the program so while this is true basically just keep moving on but if
1:58:20
user enters exit this will not be true anymore it will be false so loop will basically break and application will end now you see that we have a warning on this user input that we're using here and if i hover over it you see a message that says name user input can be undefined so it's not always undefined but it can be and here i want to mention again that pycharm because it's an intelligent editor can give you actually this warning when otherwise in a simple or normal code editor you probably wouldn't get such a warning
1:58:59
so again it helps you in avoiding some of the mistakes that you might accidentally make when writing code so basically it detects the errors or possible errors for you and tells you to fix it so again this kind of intelligent warnings and error messages can be a lot of help when programming an application and now let's fix that warning so what's that all about the problem is on the very very first run of this while loop user input variable itself will not exist why because we're creating that user input variable
1:59:41
on this line first so our application will basically complain because when our while loop runs for the first time it will not be able to find user input variable let's actually try that and as you see user input is not defined so we need to create that user input variable before the first execution of the loop so right here we're going to create user input so we're going to create this user input variable before the while loops first run and it doesn't really matter what the value of that user input variable will