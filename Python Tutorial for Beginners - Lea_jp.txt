(00:00) こんにちは、この python コースへようこそ。この完全なコースでは、python を使い始めるために必要なすべてのことを学びます。python は、世の中で最も人気のあるプログラミング言語であり、Web 開発、データ サイエンスなど、さまざまな業界で使用されています。 機械学習、または一般的に自動化プログラムを作成して反復タスクを自動化するため、Python を学習することは間違いなく良い考えです。Python を簡単に紹介した後、このコースでカバーするすべてのトピックの簡単な概要を説明します。
(00:37) 文字列、数値、リスト、セット、辞書、ブール値のデータ型などの最も重要なデータ型をプログラミングするための基本的な構成要素から始め、それらをどのように扱うか、変数と関数について学び、なぜそれらが必要なのかをプログラムを書く ユーザー入力を受け入れ、try accept を使用した条件付きエラー処理を使用してユーザー入力を検証する方法を学習し、while および for ループを使用したループを学習し、実際にそれらが必要な理由を再度学習します。次のステップとして、実践的な例を使用してこれらすべての概念を学習します。
(01:19) 独自のモジュールを作成してプログラムをモジュール化する方法を学習し、組み込みの python モジュールを使用する方法をこのすべての知識を使用して確認し、次のデモ プロジェクトを構築して、 目標と締め切りをユーザー入力として入力し、目標の締め切りまでの残り日数を出力します。この演習では、日時モジュールを使用して日付を操作する方法を学習し、その後、パッケージについて学習し、パッケージとモジュールの比較を学習します。 を使用します
(01:59) 次のデモ プロジェクトでは、外部の python パッケージを使用します。このプロジェクトでは、スプレッドシート ファイルを操作するためのいくつかのタスクを自動化します。最後に、オブジェクト指向プログラミングについて説明します。プログラミングと python におけるクラスとオブジェクトとは何か、またその理由について学習します。 概念は最終的なデモ プロジェクトで非常に役立ちます。python を使用した別の一般的なユース ケースを学習します。python は、gitlab api からデータをフェッチするリクエストを作成することで、インターネット経由で他のアプリケーションと通信します。この特定のケースでは、
(02:38) 特定のユーザーの gitlab プロジェクトです。このコースが気に入った場合は、それについて学習します。このビデオを高く評価することを忘れないでください。これらすべてをお教えできることをとても楽しみにしています。始めましょう。 まず第一に Python は Java や JavaScript と同じようなプログラミング言語です Python は他の言語と比較して 2 つの非常に大きな利点があります. する前にいくつかの初期設定が必要な Java
(03:18) アプリケーションを起動することもできますが、Java と同等かそれ以上に強力な言語になっている理由や、python がより強力であると言える理由は、エコシステムに由来するものであり、Python 開発者自身が使用するライブラリとモジュールを意味します 開発するだけでなく、外部の開発者も作成および維持するため、新しいライブラリや新しい機能が追加されるため、より多くの人々が言語を採用するほど、言語はより強力になります。2番目の利点は、柔軟性があることです。
(03:55) この場合の柔軟性とは、言語を柔軟にするものを意味します。希望に合わせて簡単に成形できるため、構文やデータ型、その他の制約、さらには拡張可能なライブラリ機能などの言語の仕様によって制限または制限されることはありません。 Python は広く普及しており、この柔軟性の結果の 1 つとして、Python は多目的言語にもなりました。つまり、Python は多くの異なるカテゴリで使用されています。まず、これらのカテゴリが何であるかを見てみましょう。これを使用して、Web アプリケーションの一般的なライブラリを作成できます。
(04:36) django またはより軽量なフラスコ python は、データ サイエンスの機械学習と人工知能産業の台頭により、非常に人気が高くなり、ますます多くのライブラリが作成され、これらすべてのカテゴリの python 用にまだ追加されています。 顔認識音声認識などの人工知能プロジェクト用のデータ分析およびデータ視覚化ライブラリと、非常に強力で広く使用されている一連の機械学習ライブラリ用の人気があり、使用頻度の高いライブラリ
(05:14) Python は、Web をスクレイピングするなどのデータ収集にもよく使用されます。Web クローラーは基本的に、インターネットからデータを収集して保存し、後で再び処理して多くのさまざまな強力なライブラリを処理し、最終的に自動化するプログラムです。 with python python には、devops タスクを自動化するための多くの優れたライブラリがあります。たとえば、ci cd パイプラインからクラウド プラットフォームへの開始、インフラストラクチャの監視などです。また、python スクリプトを記述して、サーバーで自動バックアップ クリーンアップを実行することもできます。
(05:53) DevOps タスクに加えて、python l を使用して一般的なタスクだけを自動化することもできます
多くの大企業で一般的なユース ケースである Excel シートを使用したり、自分のラップトップでいくつかのタスクを自動化したりする場合や、モバイル開発ゲーム デスクトップ アプリケーション用のライブラリもありますが、これらは Python のユース ケースとしてはあまり使用されません。 ご覧のとおり、Python のユースケースは非常に広大で、実際には複数の業界にまたがっており、ほとんどがデータ分析機械学習に集中しています。
(06:31) と自動化領域について説明します。これは他の多くのプログラミング言語には当てはまらないことに注意してください。通常、1 つのプログラミング言語はいくつかの用途に適しているだけであり、他のユース ケースには別のプログラミング言語を使用する必要があります。これで、Python の知識がいかに役立つかがわかります。 それがあなたの仕事にどのように役立つか、そしてあなたの仕事とチーム全体にとってあなたをより価値のあるものにすることができます.Pythonを学ぶことにすでに興奮していることを願っています. Python 開発環境なので、
(07:10) まず必要なのは、Python をラップトップにローカルにインストールすることです。最初に、特定のオペレーティング システム用の Python パッケージをインストールまたはダウンロードします。次に、基本的にインストーラー ウィザードをクリックして、ラップトップにローカルに Python をインストールします。 'Windowsでこれを行っています。インストールプロセスの非常に重要なステップは、基本的にここに表示されているed python to pathオプションをチェックすることです. Pythonを実行できる
(07:56) 端末のコマンドは、私のように mac os を使用している場合の興味深い注意事項です。mac os にはデフォルトで python が既にインストールされているため、python バージョンを実行して実行すると、python バージョン 2.7 が表示されます。 10 がインストールされており、実際にはオペレーティング システム自体が使用している python ですが、チュートリアルでは一般的に python を使用する場合、最新バージョンの python 3 を使用したいと考えています。
(08:34) そのため、デフォルトの Python インストールをそのままにしておきます。それを使用したり変更したりせず、代わりに、ローカルにインストールしたばかりの Python バージョン 3 を使用します。 これをクリーンアップして、python バージョン 3 コマンドを実行したい 代わりに python 3 を実行し、バージョンを実行すると、バージョンが表示されるので、既にインストールされている python とインストールしたばかりの最新バージョンを区別することができます。 Pythonが利用可能になったので、その違いに注意してください
(09:14) Python 用のコード エディターをローカルにダウンロードします。Python コードを含むファイルを作成するため、Python コードを作成するための適切なエディターが必要であり、実際に現在入手可能な最高の Python コード エディターは pycharm です。 これは jetbrains からのものなので、チュートリアル全体で使用するものなので、pycharm に行きましょう。これは、コードの記述をはるかに簡単にするインテリジェントなコードエディターであり、コードを記述するときに実際に非常に生産的になります。 なぜずっと
(09:53) ご覧のとおり、コミュニティ バージョンとプロフェッショナル コミュニティ バージョンの 2 つのバージョンがあります。1 つのコミュニティ バージョンは無料で、すでに多くの強力な機能を備えていますが、プロフェッショナル エディションは、特に作成している場合に非常に便利な追加機能を提供します。 Python の Web アプリケーションまたは科学プロジェクトに対応しているため、プロフェッショナル バージョンでは、Python を使用した科学プロジェクトで使用できる科学ツールを取得できるだけでなく、もちろん Python Web フレームワークとデータベース統合のサポートも取得できます。
(10:27) Web アプリケーションを開発している場合、プロフェッショナル エディションを入手したい場合、jetbrains が実際に私のチャンネル用のコードを提供してくれたので、3 か月間無料で試すことができます。インストール時に私のコードを使用してください。 このデモ コミュニティ バージョンはまったく問題ないので、これを使用してインストールし、[ダウンロード] をクリックします。pycharm インストーラーが完全にダウンロードされたら、それをクリックしてアプリケーションに移動し、実際にローカルで使用できるようになりました。 私はただ開くつもりです
(11:09) アプリケーションと pychar について簡単に説明します。セットアップは実際には非常に簡単です。これで pycharm ができました。これで新しいプロジェクトを作成できます。それを私の python プロジェクトと呼びましょう。 基本的には他に何も変更する必要はありません。ここでは、基本的にこのアプリケーション フォルダーが作成される場所が表示されます。pycharm プロジェクト フォルダーがユーザー ディレクトリに作成されていることがわかります。すべての pycharm プロジェクトまたは私の Python プロジェクト
(11:52) pycharm を使用して作成したものは 1 つの場所に作成されます。ここでは、インストールした Python バージョン 3 がこのプロジェクトに自動的に使用されていることもわかります。 インタープリターは基本的に、Pythonコードを実行する方法を知っているプログラムです。Pythonコードをコンピューターが理解できる命令に解釈または変換する方法。この構成では、プロジェクトを作成するために何も変更する必要はありません。最初に
(12:30) このすべてを少し大きくして、横にあるメニューとコードを少し見やすくするため、環境設定エディターのフォントでサイズを設定します これをここに適用すると、このコード エディターのフォントが基本的に大きくなり、ここでこのメニュー フォントのサイズも大きくしたいので、外観上はおそらく 18 に設定します。 基本的にすべてが大きくなったので、フォローして、私が入力しているものを正確に確認できます
(13:15) また、テーマを基本的に構成したい場合は、別の注意事項もあります。暗くしたくない場合や、他の配色が必要な場合は、ここで外観を選択して、4 つのテーマを利用できます。 実際にこれを試して適用してみましょう。別のテーマがあります。私は実際にこれを好みます。このままにしておきます。ご覧のように、1 つのメイン メインを持つ非常に単純なプロジェクトがあります。
(13:51) pi ファイル拡張子は、基本的に非常に単純なコードを含む python ファイル用です。基本的には、これらすべてを削除して、クリーンな python ファイルの状態から開始します。次のセクションでは、すぐに飛び込みます。 最初の単純な python アプリケーションを作成します。python の最も単純な例から始めて、基本的に python 構文を学習し、できるだけ簡単に開始します。まず最初に、出力を出力するだけの非常に単純なアプリケーションを作成します。 python 基本的に印刷したいときの結果を表示します
(14:36) 書きましたが、print という構文を使用しています。ここでは、基本的に表示したいものを何でも渡すことができます。この非常に単純なアプリケーションが機能するかどうかを確認したい場合は、実行するか、この三角形を使用して実行します。 そして私は出力を持っているので、基本的に出力はここに表示または印刷され、出力が1であることがわかります.
(15:03) 200 などの他の値を表示して実行することができます。基本的に何らかの文を表示し、再び三角形を表示したいとします。その出力がここにあるので、Python の記述の非常に単純な例です。 基本的に実行時に何らかの情報を表示するコード ここで注意したいことの 1 つは、基本的にこのウィンドウで、つまりメインでいくつかのコードを記述していることです。
(15:46) pi ファイルを実行したり、コードを実行したりすると、このウィンドウに何らかの表示が表示されるため、このウィンドウとは何か、なぜここに出力が表示されるのか疑問に思われるかもしれません。 「pycharm のようなツールを使用しています。これらのツールは基本的に、コードを記述してコードを実行するために必要なすべての機能を備えています。基本的にすべてが 1 か所にあるため、記述したものは何でも、そのようなツールがなくてもすぐに実行または実行できます。 コードを書き、それをどのように実行するか
(16:26) コードとこれは、ここで何が起こっているのかを理解するのに役立ち、端末に戻って新しいファイルを作成し、それをテストドットと呼ぶことを示します py 基本的にこのファイルに同じコードを書きます。ファイル エディターで実行できます。コマンド ラインで直接実行して保存するだけなので、ここと同じファイルがありますが、内部にはありません。 このpycharmツール内にないコードエディターで、ローカルでpython 3を利用できるので、実際にpythonを実行するにはどうすればよいですか
(17:17) この円グラフの外にあるファイルは、python 3 test dot p y を使用して実行できます。これを実行すると、コマンド ラインで同じ出力が得られるため、基本的にここに表示されているものはすべて統合されているため、基本的にすべてが含まれています。 コードを記述できる場所の 1 つは、プロジェクト内のファイルをナビゲートできるエディターです。基本的に、これはラップトップの単なるフォルダーであり、ここでファイルをナビゲートでき、同時に実行環境も用意されているので、 ターミナルに移動して python 3 を実行する必要があります
(18:03) すべてが 1 か所にあり、Python のさまざまなプログラミング言語にこの種の環境を提供するツールが何であれ、たまたま pycharm です。これらは統合開発環境を表す ides と呼ばれます。 ターミナルを使用する必要はありませんが、この統合に加えて、構文の強調表示、エラーの強調表示、コードの提案のオートコンプリートなど、Python コードの記述に役立つよりクールな機能を利用できます。
(18:40) これらのクールな機能は、このコース全体でも実際に見られるので、基本的には開発者としての生活を楽にするだけですが、端末上でファイルを実行する際の関係を理解することは良いことです。 ツールではなく、そのツール内でアプリケーションを実行して作業するのは素晴らしいので、コードエディターに戻ってファイルここでコードを書きます。これまで、基本的にテキストを印刷して数字を正しく印刷するなど、非常に単純なことを行ってきました。
(19:23) データ型であるプログラミング言語の最初の概念です。Python では、他のプログラミング言語と同様に、テキストと数値のデータ型があります。テキスト データ型は文字列と呼ばれるため、二重引用符内のすべては基本的に文字列です。 ただし、Pythonでは文字列に一重引用符を使用することもできるため、二重引用符または一重引用符はどちらも同じように機能し、実際には違いはなく、数値の場合は実際には異なるデータ型があるため、2 20 のような整数の場合
(20:02) 0 と負の数も同様に、整数と呼ばれるデータ型があり、ほとんどのプログラミング言語でこのように呼ばれていますが、たとえば製品の価格などの通貨の数値もあります。 たとえば、オンラインショップの価格はこのようなもので、これらは基本的に精度のある数値です。たとえば、何かを出荷する場合、パッケージの重量も整数ではありませんが、精度がある可能性があるため、これは 数字の種類
(20:37) Python や他の多くのプログラミング言語は浮動小数点データ型として表されるため、ここでも整数型と浮動小数点型があり、それを実行すると、基本的にすべてが出力され、数値や数値などの値が明らかに出力されます。 このようなテキストは、ここにある単純なプログラムから有用な情報を取得しない限り、あまり意味がありません。それでは、python でもっと有用なことをしましょう。これをすべてクリーンアップして、いくつかの計算を行いたいとしましょう。非常に単純なロジック それか
(21:24) 基本的に 20 日間の分数を計算するので、1 日 24 時間で 1 時間あたり 60 分である 20 日があるので、この行は基本的に 20 日間の分の計算を示します。 私たちの数はもう少し理にかなっています。なぜなら、実際に何かを行うプログラムができたからです。基本的には、ご覧のように、Python で数値に対して任意の数学演算を行うことができ、他の多くのプログラミング言語でもプラスマイナス除算を行うことができます。 あなたが基本的な数学からそれを知っているのと同じように
(22:09) しかし、ここで注意したいのは、多くの人がプログラミングについて考えており、ウェブ開発を行っているか、Python を使用して自動化を開発している場合であり、データ サイエンスやデータ分析のようなものではないという誤解を受けている可能性があるということです。 おそらく、Python でのプログラミングに必要な最高の数学知識の例です。なぜなら、いくつかの計算例を使用するつもりですが、それらは Python の基本概念を示す例としてちょうど良いからです。高度な知識は実際には必要ありません。 あるいは
(22:49) プログラミング時の数学の中間知識は、実際には覚醒剤に関するものではありませんが、必要なのは論理的思考であり、そのいくつかを行って例として見ていきます。 それについて誤解されているので、例に戻ると、結果としてここに表示されるこの番号がありますが、おそらくこのプログラムを使用する場合、覚えていないか、他の誰かが使用している場合にこの番号が何を表しているのかわからないので、 説明を追加する
(23:27) 20 日が何分であるかを示すこの数値に関する情報なので、基本的には 20 日がこの分であるという行が必要です。 この計算は基本的にここの真ん中にあるので、このフレーズ全体がここに表示されるので、基本的にテキストと数字をどのように組み合わせるか、または数字の計算を行います。プログラミング言語では、これはPythonに固有のものではありません。何かを使用してそれを行います と呼ばれる
(24:11) 文字列連結と文字列連結は基本的に、複数の文字列をくっつけたり組み合わせたりするための派手な言葉です。プラス記号を使用して文字列を結合するように、その構文はどのように見えますか? 複数の文字列を結合するためのプログラミングでは、この例では 3 つの文字列値があり、それらをすべて 1 つの文字列または 1 つの文にまとめたいと考えています。 三番目
(24:51) 計算の値となる文字列ですが、ここに数値を入力すると、Python インタープリターはそれが文字列ではなく数値であると通知するため、他のプログラミング言語が Python で自動的に行う文字列に変換する必要があります。 これを明示的に行う必要があるため、Python にこの数値を数値としてではなく文字列として受け取るように指示する必要があります。これは、まさにそのように見える構文を使用して行うため、基本的には文字列以外の値がありますが、 python として出力する必要があるため、文字列として使用します。
(25:34) テキスト 基本的にそうならこの行を実行して何が起こったのか見てみましょう。ここに書いたのと同じように出力が得られますが、周りにスペースがないことがわかります。基本的に 50 は周りにスペースがなく、本当に接着されています。 50 基本的にここにスペースを追加してください ここにスペースを追加してくださいなぜそれが機能するのですか?なぜなら、Pythonのこの全体が再び文字列であるためです。これは、これらの引用符内に配置しているためです。
(26:14) これらの引用符の間に入れると、Python によってこのスペース文字を含む文字列として解釈されるため、もう一度実行すると 50 前後のスペースがあり、文は問題なく表示されます。 これは実際にはちょっと厄介です。まず第一に見苦しく、忘れてしまう可能性が高いため、これは絶対に正しいので、Python では、別の構文を使用してよりエレガントな方法でそれを行う方法があります。 そしてより洗練された構文
(26:56) 実際にこれを閉じて、印刷してもう一度書きましょう。これらのプラスの代わりに中括弧を使用し、数値を内部または非テキスト値に書き込み、基本的に開始する前にここに番号を書き込みます。 引用符で始まる文字列を書くと、文字 f を書くだけで、構文が強調表示されます。基本的に、これはテキストの一部ではないことがわかります。これは非テキスト値であり、実行すると、 2行目、これは本当に
(27:44) plus を使用する代わりにこれを書くためのよりクールな方法ですが、これは非常に一般的なものであり、ほとんどのプログラミング言語で遭遇するものでもあるため、これが文字列連結の構文でもあることを知っておくことが重要です。 基本的にそれを削除して、この構文を例に使用できます。また、この構文は実際には python に新しく追加されたものであるため、実際に構成してバージョン 3 を選択したことを覚えていれば、プロジェクトに最新の python バージョンがある場合にのみ機能することに注意してください。
(28:23) 9 これが、たとえば python バージョン 2 などの python 2 を使用する場合に機能する理由です。この構文は機能しません。実際にデモを行うことができるので、その行をコピーします。 私たちのtest.piを変更しようとしていますが、Python 3を使用して実行すると、バージョン2のPythonで実行すると正常に動作することがわかります.pythonバージョン2.7.
(29:16) 10古いバージョンは基本的にこの構文を認識しないため、この構文は実際には 3.6 以降の Python バージョンでのみ機能するため、それ以下のすべての Python バージョンは基本的にこの構文を認識しません。 ここでもう一度コードに戻りますが、ここには数字しかありませんが、実際に必要なのは正しい結果を得るための計算であるため、20 日を時間単位で、次に分単位でもう一度実行すると、それが表示されます。 計算が行われ、ここに完全な完全な文があります
(29:59) その結果、興味があれば、この f は実際には format を表しているので、これは基本的にテキストまたは文字列を正しい方法でフォーマットしています。 20 日で数分あります。たとえば、35 日間同じことをしたいとします。基本的にその行をコピーして、20 の値を 35 に置き換えます。実行すると、同じ計算が得られますが、35 日間と 基本的に、異なる値に対して複数回行うことができるので、
(30:48) 50 日間が必要で、同じ計算が必要です。たとえば、110 日はあまり重要ではなく、これらの値ごとに明らかに異なる分数があるとします。 このプログラムは準備ができており、私たちはそれを使用しています。ある時点で、このプログラムに、これらの提供された日数が分ではなく何秒あるかを実際に計算させたいことを知っていると判断します。その場合に必要なことは、基本的に これら 4 行すべての計算を変更します
(31:28) したがって、分ではなく実際に 1 日の秒数を正しく計算する必要があるため、時分と秒があり、ここでもテキストを変更する必要があり、それぞれに対してそれを行う必要があります。 これらの行は正しいので、これを数時間または数ミリ秒、または基本的にこれらの変更を複数回行う必要がある場合は、このように何度も繰り返しますが、実際に見た場合、これは同じ正確な計算です 必要に応じて正しく変更されない各行
(32:08) 秒では、これはあなたが行う必要がある計算です。コード内で同じ計算と同じテキストを繰り返さないようにするにはどうすればよいでしょうか。それに対する答えは変数です。プログラミング言語では、基本的に保持する変数があります。 コード全体で繰り返される値一度設定して複数の異なる場所で使用するため、基本的にこの計算を4回繰り返す代わりに、基本的にこの計算をこのように1回行い、基本的にこの値を変数に保存して使用できるようにします
(32:54) 正しい必要があり、Python で変数を定義する方法が変数名である場合はいつでも、それを 2 秒に等しいと呼びましょう。その値が何であれ、それ自体が繰り返され、変数に保存したい場合は、2 つにしたいと思います。 ここでは、Python の変数について、まず Python で変数を定義または作成し、この構文のような値を与えることについて、他の言語と比較して実際には非常に単純であることを示します。 実際に定義する必要があります
(33:40) ここでは、その変数のある種のデータ型です。たとえば、Python で float、integer、string などの数値である場合、2 番目の変数のように単純な名前の変数を定義する必要はありません。 は変数の命名規則または標準であるため、2 つの単語があります。たとえば、変数計算の名前を秒にすると、実際にはここに 3 つの単語があるため、変数は説明的であり、基本的に、この値が実際に何であるかを示します。 それらの複数の単語は、それらを区切ることができます
(34:18) これらの下線を別の言語で再び使用すると、Python では変数の命名が異なる可能性があります。これは、実際にはアンダースコアを使用して変数を定義する標準的な方法の 1 つであり、非常に素晴らしく読みやすいので、これを使用します。 構文は基本的にコース全体を通して、このように書いても、代わりに大文字を使用しても、完全に完全に問題ありませんが、これもおそらく最も読みやすい形式であり、これがここで使用するものです。 名前を決める
(34:55) 変数を指定したいのですが、python には、python にとって特別な意味を持つ特定の単語がいくつかあります。これらは予約語と呼ばれるため、これらの単語を変数名として使用することはできません。これらの予約語の一部を全体を通して使用します。 コースでは、いくつかの素晴らしい例が表示されるので、ここで変数を定義しました。これは、この変数が提供する値です。これらの繰り返し値をこの変数に置き換えるにはどうすればよいので、それを削除して、内部で再び 単にコピーするだけです
(35:34) 変数の名前ですので、実行してみましょう。ご覧のとおり、値が正常に出力されました。これらすべての値に対して同じことを行い、もう一度すべてを実行すると、以前と同じように機能します。 これを分に変更すると、これらすべての場所で変数を変更する必要があるため、基本的に変数の名前をより一般的なものに変更するだけでよいため、計算を単位にすると、これは2番目に必要な単位になる可能性があります。 関係ない
(36:20) これはまさに変数の利点です。なぜなら、基本的にこの変数が何であるかを説明するだけで、好きな名前を付けることができるからです。これを再度変更する必要はありません。それに応じて、ここでこれを置き換えることもできます。 これはテキストなので、ユニットの名前と呼ぶことができます ユニットと呼ぶこともできます ユニットは実際には問題ではありません その変数名が何であるかを決定するのは私たちであり、その変数を取得したら、ここでそれを置き換えることができます どうすればいいですか これは、これが実際にはテキストの一部であるためです。
(37:00) ここでそれを削除し、式を作成します 基本的にpythonに伝える構文を作成します これは文字列ではありません これは文字列以外の値であり、これが数値または変数自体である可能性があることはすでにわかっています 中括弧と変数の名前を使用します。ここでこれらの値を置換したのと同じように、実行すると完全に正常に動作し、4 行すべてでそれを行うことができ、コードはまだ動作しています。 そして、この構文がここにあり、最初にこの形式があり、基本的に私たちを妨げています
(37:48) or avoids は基本的にここにたくさんのプラス記号やスペース文字などを入れることから私たちを救ってくれます。 秒ではなく指定された日にあり、プログラムを変更して、基本的にここで計算を変更するだけで済み、秒の代わりに時間があります。そこで実行すると、すぐに変更が表示されるので、これは どの言語でいつプログラミングを行うかが重要ではない理由
(38:31) 変数を使用して Python をインクルードすることは、おそらく最も頻繁に行うことの 1 つです。なぜなら、常に繰り返される値があり、きれいなコードを書きたいので、変数を作成し、作成時のベスト プラクティスの 1 つになるからです。 変数の使用とは、ここで実際に使用しているものと同じで、変数に名前を付けて、後であなたと一緒に作業している他のプログラマーがこの変数が実際に何であるかを理解できるようにすることです。
24を見ただけではおそらくわからないので、実際にどのような値を持っているか
(39:08) この 24 は正しいですが、変数を使用すると、これが実際に単位を計算するために使用される数値を表していることが実際にわかります。また、日数の単位のように、より説明的である可能性もありますが、一般的に、変数の別の利点は、基本的に説明することです その値とコードで使用しているもう 1 つのことは、ここで変数を使用していても、4 つの異なる場所でこれらの値を変更する必要がないことです。 実際にきれいです
(39:48) 同様に、これらの 4 行の唯一の違いは、実際にはこれらの数字です。他のすべてはまったく同じです。代わりに、このコードをよりクリーンにし、基本的にコード内でのこの種の重複を回避したい場合はどうでしょうか。たとえば、 10個の異なる値に対してこれを行った場合、同じ行がこの長い行で基本的に10回正しいので、このタイプの重複をどのように回避するのでしょうか? どうやって
(40:28) 実際には、値だけでなく複数の異なるものが含まれている基本的にコード全体の行全体を複製することは避けてください。関数を使用してそれを行うため、関数は基本的にこの権利のようなコードのブロックまたは基本的にコード内のロジックです。 それは単なる値ではなく、実際にはコード内で同じロジックまたは同じロジックのほとんどを繰り返さないようにするために再び使用されるより複雑な何かを行うので、ここで変数を作成したのと同じように関数を作成するにはどうすればよいですか? 機能と私たちのやり方
(41:10) ここで次の構文を使用している最初の関数を作成しましょう def で始まる最初の関数を作成して、変数を定義するのと同じように関数を定義しますが、関数には基本的に def と呼ばれるこのキーワードが必要です。 変数に名前を付けたのと同じように、関数に名前を付けることができます。ここでは、変数のように同じ標準を使用できます。関数に、この関数が何をするかを実際に示す説明的な名前を付けることができます。関数を日単位で呼び出しましょう。 そしてブラケットがあります
(41:53) と列なので、この行は基本的に関数を定義し、Python に伝えます。この後に来るものは実際には参照されるコードのブロックになるか、これら 2 つのユニットとどのように命名されるかです。 関数を書きますか?実際にこれをここにコピーして、スペースを空けましょう。これは python に固有のものなので、ここをスペースでインデントする必要があります。これらの中にコピーしたものを貼り付けます。 2行は基本的にPythonにこのコードまたはこのコード行を伝えます
(42:36) ここには 1 行しかないため、これら 2 つのユニットと呼ばれる関数に属しています。また、1 行しかありませんが、これは何百行もの関数である可能性があるため、次の行はすべて適切であり、 次に、いくつかの計算を行うことができ、基本的にここに必要なロジックを記述できます。これらはすべてこの関数に属します。したがって、このロジックはこれら 2 つのユニットと呼ばれる関数内にあり、実際にこれを取り除き、関数をテストできます。 ここで、この黄色の線が
(43:22) 実際にはコード スタイルの警告である関数名は、前に 2 つの空白行が必要であると述べているため、pycharm には Python 用の組み込みの公式スタイル ガイドがあり、コードのスタイルを設定する方法やコードを正しく記述する方法を説明しています。 コードを書くのと同じように、コードスタイルが重要なのはなぜですか?コードが実際に何をしているのかを理解するには、他の開発者からのコードや自分のコードを読む必要があるため、コードが読みやすいことが重要です。 パイチャームのように
(43:57) コードを書くのに役立つので、警告を修正するために、関数定義の前に新しい空白行を追加するだけなので、このコード ブロックを実行するとどうなるか、ここで変数が定義されています。 関数で m を使用すると、これらの 2 つの print ステートメントがあるため、ここで実行するとどうなりますか。ここの出力でわかるように、出力はありません。実際には何も印刷されていません。 関数で定義されていますが、出力には何も表示されません
(44:36) 関数を作成するか、このような関数を定義するときは常に、実際にその関数を再度使用する必要があります。これは変数と同様の概念であり、ここで変数を作成し、その変数を使用しています。 私たちのコードでは、関数を作成するのと同じ方法でその関数を使用する必要があります。関数の使用方法またはプログラミング言語では、関数の呼び出しまたは関数の実行と呼ばれ、このような関数の名前を使用してそれを行います。 提案にも表示されます
(45:13) このようにブラケットを使用するo この構文は基本的に、ここで定義した関数を呼び出す、またはその関数を使用するというものです。そこで実行すると、これらの 2 行が実行され、結果がここにあるので、変数を作成しています。 ここではそれを使用して関数を作成しています。ここではその関数を使用しています。変数を使用する場合と関数を使用する場合の違いに注意してください。Python はこれが関数であることを認識しています。 教えてくれます
(45:52) 基本的に関数呼び出しを行っていますが、ご覧のとおり、この 20 日間があるため、これは 20 日間しか機能しません。35 日間と 100 日間の値はありませんでした。 -ここでは1つのケースしかないので、関数を使用して、ここにあるこれら2つの値を除く他のすべてが実際に同じままになるようにするにはどうすればよいですか? パラメータなので、基本的にこの20の代わりに
(46:37) こことここで言ったように、ここでハードコードされており、基本的に関数を使用するたびに 20 または 35 の値を提供します。 その関数を値35で使用し、関数でこの入力パラメーターを定義する方法は、これらの括弧の間でこのパラメーターを定義することによって非常に単純になるため、プログラマーとしての入力が入力パラメーターを定義する場所です。 私たちのすでにおなじみの変数なので、基本的にここにいます
(47:25) 変数を定義し、好きなように呼びます。日数または日数と呼びますが、ここで行ったようにその変数に値を割り当てていません。 関数を使用するたびに割り当てられるようにしたいので、これは基本的にPythonに、これらの2つの単位を1つの入力パラメーターを使用して使用できることを伝えます。これは日付の正しい日数と呼ばれるため、残りの最後の部分はこれらを置き換えています この変数を正しく使用する値と、これら 2 つの変数で行うのと同じように
(48:08) ここで定義された変数を使用している場所でも、これを削除して非テキスト値のブロックを定義するのとまったく同じ方法で、変数 num の更新をこことここにも配置するので、 関数には実際には固定数が含まれていないことがわかります。代わりに変数を使用しています。その関数の外部で定義されている 2 つの変数を使用しており、その関数内で定義されている 1 つの変数を使用しています。この変数は実際には その機能に属する
(48:52) ご覧のように、その関数を使用するときはいつでも、基本的に 35 の入力パラメーターを使用して、日と呼ばれるこの関数を単位に呼び出すように Python に指示しています。 また、ここでそれを行うと、35 日が表示され、計算はここで行われ、時間と現在、異なる日数に対して 4 つの異なる値に対してこれらを計算したかった前の例に戻ると、実際には同じことができます。 20 だった場合は 50 だったし、110 だったので、これは基本的に正確な結果を示します。
(49:40) 以前と同じロジックですが、構文が異なります。つまり、これを基本的に 4 回使用する代わりに、このロジックが何を行っているかを実際に確認できる、はるかにクリーンな構文になっているという違いがわかります。 次に、関数をパラメーターとして渡すか指定する日数があり、これを実行すると、すべての異なる値に対して 4 回出力されていることがわかります。実際にこの行を削除できます。 変更例
(50:24) この変数の名前を単位ではなく時間にしたいので、1 か所で 1 回実行するだけです。基本的にはそれで、その関数内でどのような変更を加えても、実際にはコードで関数を使用することの大きな利点です。 ここでどのような変更を加えても、関数の使用方法には影響しません。関数を使用するために必要なのは、その関数の名前と入力パラメーターだけだからです。おそらく、関数に値を指定しないとどうなるか疑問に思っているでしょう。 これらの行を削除してみましょう
(51:05) ここでは値を指定せず、パラメーターなしで関数を実行または呼び出しようとします。実行してみましょう。Python インタープリターが文句を言っていることがわかります。 私はそれを使用したい、または私の同僚は別のプログラマーがその関数を使用したいので、ここで入力値を提供する必要があるため、Pythonがその関数の使用法を確認し、その関数に与えている入力パラメーターがない場合はいつでも実行できません 正しく機能する
(51:47) 基本的にこの値はここにありません。そのため、必要な引数が 1 つ欠落しているというエラーが表示されるのは、入力パラメーターを持つパラメーターを持つ関数を定義するたびにわかるように、その入力パラメーターも提供する必要があります。関数に複数の入力パラメーターを提供したい場合はどうすればよいかということも不思議に思うかもしれません。 そして、私たちが欲しいとしましょう
(52:24) カスタム メッセージのように追加で出力したいものをここに渡すことは問題ではありません。最初のメッセージとまったく同じ方法で、ここで実際に使用できます。新しいメッセージを作成することもできます。 行と基本的にそのメッセージを正しく出力し、ストリームなしで変数を使用している場合、基本的には変数自体であり、その場合はテキストを使用していないことに注意してください。その場合、このフォーマットは必要ないので、基本的には 直接印刷して、もう一度pythonに伝えました
(53:02) この関数があり、2 つの入力パラメーターが必要なので、その関数を使用するときはいつでも入力値を渡す必要があるので、カスタム メッセージを渡してみましょう。 私は幸せになるとわかっているので、素晴らしいと言って別の計算をしましょう。今回は見た目が良いと言います。それを実行すると、最初は最高になり、次に 35 で見栄えがよくなることがわかります。基本的には 必要な数の入力パラメーターを定義して提供します。
(53:47) 練習と、通常のコードで表示されるものは、基本的には 1 つまたは 2 つのほんの一握りの入力パラメーターにすぎないため、実際には 10 個のパラメーターでオーバーロードされていません。 なぜそれらは有用なのか、どのように使用するのか 言及したい点が 1 つあります。これは関数の変数スコープです。この関数で以前に述べたように、複数の変数を使用しています。つまり、2 つの変数を使用しています。 その入力権の一部
(54:29) 関数を使用するときに提供し、コード内の別の場所で関数の外で定義されている 2 つの変数を使用しているため、変数のスコープは基本的に、関数が使用する変数が定義され、変数がグローバル スコープを持っていることを意味します。 ここにあるこれら2つの変数のように関数の外部で定義されている関数は、関数が存在する同じファイルではなく、完全に別のファイルにある可能性があるため、これらはグローバル変数であるため、Pythonコードにあるすべての関数を使用できます それらのグローバル
(55:06) 変数とローカル変数があります ローカル変数はその関数内で作成される変数であるため、これら 2 つの変数は基本的にその関数内でのみ使用できます。これは、その関数内で作成されたため、内部スコープとグローバル スコープということです。 別の関数を作成するときは、それをスコープチェックと呼びましょう。これがこれから行うことなので、この関数でスコープをテストしたいので、ユニットの名前などのグローバル変数にアクセスできますが、内部変数にはアクセスできません
(55:57) 日数のような変数と実際にテストしてみましょう。関数の外側で定義されたグローバル変数である num of units があり、2 番目のユニットには別の関数内で定義されている変数があります。 内部であり、ここにあるように、未解決の参照日数を示す赤い線がすでに下に表示されているため、この関数では、基本的にその変数は表示されず、アクセスできません。基本的にはまったく存在せず、実際にテストすることもできます 繰り返しますが、結果を見たい場合は
(56:43) この関数を実際にこのように使用する必要があります。関数を実行すると、name num of days is not defined right というエラーが表示されます。次のような関数があることを認識していません。 ただし、コード内のどこでもグローバル変数は認識されます。つまり、関数自体の外部で定義された変数グローバル変数はすべての関数にアクセスでき、関数内で定義された変数がある場合、それらはその特定の関数に対してのみアクセス可能であり、 他のものとそれは意味します
(57:22) 実際には、スコープ チェック変数に num of days 変数が存在しない場合、スコープ チェック内に同じ名前の変数を実際に作成でき、基本的にはまったく問題がないため、重複することはありません。 この関数はこの変数についてここでの日数を認識していないため、スコープチェックはここで変数の日数について何も認識していないため、その関数を使用したい場合は、値を指定する必要があります 20 を実行してみましょう そこで実行すると、ユニットの名前があり、
(58:02) 私たちが提供した 20 なので、ここで定義されたグローバル変数 ローカル変数 もう 1 つの興味深い点は、関数本体の中で言ったように、これは基本的に、このインデント内の関数の一部が関数本体と呼ばれるということです。 したがって、その関数本体内で必要なロジックを作成できるため、Pythonでできることはすべて、関数本体内で実行できるため、そのうちの1つですここで変数を作成したのと同じように、実際に変数を作成しています ここで変数を作成できます このように呼び出しましょう
(58:45) myvariable と variable は関数内にあり、それも出力できるので、この関数で使用している 3 つのタイプの変数があり、グローバル変数があり、パラメータとして渡される内部変数があり、 基本的に定義されている内部変数が再びあるため、関数を使用するときに変数は提供されませんが、基本的には変数内で定義されているだけであり、これを実行すると、数時間の更新と関数テキスト内の変数がこのように出力され、明らかに出力されます これはちょうど
(59:38) デモンストレーションですが、私たちのプロジェクトでより現実的な例を見ていきますので、これを片付けて次のコンセプトに進むことができるので、計算する例に戻りましょう このアプリケーションを私たちや他の誰かにとって本当に役立つようにしたい場合は、ここで4つの異なる値だけに固定する必要があるのは役に立ちません。 基本的に適切に適合する価値があるため、
(1:00:18) 任意の日数を指定すると、プログラムはその日の時間数を計算する必要があるため、ここで必要なのはユーザーの入力です。したがって、このアプリケーション プログラムを他の人に渡したり、自分で使用したりする場合は、ある程度許可する必要があります。 ユーザー入力 では、ユーザー入力を要求して受け入れ、そのユーザー入力に基づいて何らかの計算を行うプログラムを作成するにはどうすればよいでしょうか Python アプリケーションからユーザー入力を受け入れるのは、実際には非常に簡単です。 これらすべての行の
(1:00:58) まず、input を記述することでそれを行うことができます。これは基本的に、ユーザーに何らかの入力値を入力するプロンプトを表示します。おそらく構文から、これが日から単位への関数を使用するのと非常によく似ていることがわかります。 この場合はパラメーターを使用しているため、入力は実際には python が提供する関数であるため、この入力関数を記述する必要はありませんでした 必要なときはいつでも、この括弧は python を示します
(1:01:43) 入力関数を呼び出したいのですが、それを呼び出しているか、パラメーターなしで関数を使用しているので、必要なロジックのために自分で関数を作成できることがわかりましたが、python には python を使用する関数がたくさんあります。 開発者は既に作成しており、Python の一部であり、コードで使用できるため、誰もが独自の入力関数ロジックを記述する必要はなく、Python が提供するコードまたは関数は、プロジェクトで使用するこの Python の一部であり、 明らかに最新バージョンを使用している場合
(1:02:23) Python の最新のコードと最新の関数を取得します。Python が基本的に提供する関数の実行に戻ります。このプログラムを実行するとどうなるか見てみましょう。実行すると出力が表示されます。 実際にはカーソル以外は何も表示されないので、実際にはユーザー入力を待っているので、実際にここに何かを入力できるので、20 を実行して終了コードを入力して処理を終了できるので、何かを入力できませんでした 実際には文字列でもかまいません
(1:03:08) 実際には問題ではなく、プログラムは基本的に終了するため、これが入力の最も単純な使用法ですが、ここでこのプログラムを実行していて、基本的にこの空白の出力がここにあることに気付いたように、少し混乱するので、別のユーザーが私たちの プログラムでは、おそらくここで何が起こっているのか疑問に思っているので、入力関数でできることは、実際にユーザーに日数の値を入力するような何かを実際に伝えるパラメーターを提供できることです。 だから私たちはそれを行うことができます
(1:03:52) パラメータにメッセージとなる文字列を渡すことで、ユーザーが日数を入力できるようになり、それを時間に変換します。 何も入力しなかったため終了したため、このプログラムの終了行はまだ出力されていません。つまり、プログラムはまだ実行中であり、入力を待っています。プログラムを自分で手動で終了したい場合は、この ide の pycharm で待機しています。 この停止ボタンをクリックすると、プロセスが終了したことがわかります
(1:04:40) これでプログラムを再度実行できます。ここに示すように、ユーザーに表示しているメッセージが既にあるので、ユーザーは時間を正しく入力できます。ここで 30 とそこに入力を提供できます。 しかし、これは見栄えがよくありません。実際には、ユーザーに次の行でプロンプトを表示させたいのですが、文字列の一部としてそれを行うにはどうすればよいですか?基本的に改行または改行文字を実際に追加できます。 バックスラッシュ n で表され、その特別な強調表示が表示されます
(1:05:23) 実行してみましょう。カーソルが次の行にあることがわかります。再び値を入力してプログラムを終了させましょう。空のプロンプトを表示するだけでなく、プログラムのユーザーに入力を求めるよりユーザーフレンドリーな方法が得られ、ユーザー入力を取得しているため、何もしていません。 ユーザー入力権 入力は基本的にプログラムを終了するだけであり、その入力に対して計算を行っていないため、入力関数が実行されたときにユーザーがここに入力した値をどのように使用するか
(1:06:04) これは非常に重要な概念であり、この関数の使用によって得られる結果を代入することで、この場合はユーザー入力がその結果を変数に代入するため、現在は基本的に実行され、無駄になっています。 代わりに、入力値を入力した値を変数に保存して、後でアクセスできるようにします。これをユーザー入力変数と呼びましょう。変数名と値の権利で変数を作成したように、または 私たちがやった場合でも表現の権利
(1:06:47) ここでの計算は、基本的に式全体になります。関数の実行によって変数に代入される値を使用できるのと同じ方法で、全体の計算が行われるので、これから私がやろうとしていることは、 ユーザー入力を出力して、そのユーザー入力変数の値を確認できるようにします。もう一度実行して、入力を要求します。20 を入力して、ユーザー入力を出力すると 20 が得られます。
(1:07:20) したがって、ユーザー入力変数の値は基本的に入力として提供するものになります。これは新しい概念であり、少し混乱する可能性があるため、独自の関数で別の例を見てみましょう。 これを変数に渡すと、ここでエディターに表示されるように警告が表示されます。これは、基本的に、何かが正しくないときに警告を発し、関数が何も返さないという警告が表示されるという ides の優れた点の 1 つです。 何らかの価値を持つ
(1:08:05) 関数の実行の結果として、関数で何らかの値を返す必要があります。値をすぐに出力する代わりに、return キーワードを使用して実際にその値を返すことができます。ここで特別な強調表示が表示されます。 ここのように return はPythonが理解する特別な単語であるため、関数 right を使用した結果として、基本的にこの値をここで返したいと考えているため、ここで何らかのロジックを使用して計算を行い、最後の行として 戻ることができます
(1:08:48) 計算された値で、警告はなくなりました。これは、関数から実際に何かを返しているためです。また、関数から再び値を返すときに、その値を変数に割り当てて、その値を何にでも使用できるようにします。 変数を参照することによって返される関数であり、使用方法の 1 つは、基本的には以前と同じように出力することです。一時的に削除してプログラムをテストしてみましょう。この関数が入力 20 で実行されたことがわかります。このテキスト 基本的にテキストを表示する
(1:09:33) は関数にまとめられ、結果として返されるか返されました。この文字列全体、基本的にこの文全体を myvar という変数に保存し、その myvar を出力すると、その値が出力されていることがわかります。 ここで、他の値を何度も入力すると、別のテキストが返されます。これは、実際には、関数の実行から結果を返すという非常に重要な概念であり、例で見たように、返さない関数を持つことができます。 値は何かを印刷するだけです
(1:10:09) 両方の型を持つことができる何らかの値を返す何か他のことや関数を実行する可能性があるので、ユーザー入力の例に戻ると、入力関数がユーザーが結果として入力した値を返すことが理にかなっていることを願っています。 変数に保存して、後で再びアクセスすることができます この行を削除して、実際にユーザー入力の日数を計算してみましょう 実際にそれを行う関数を呼び出すことで、非常に簡単に日数を計算します 私たちは私たちの
(1:10:53) 入力の時間数を計算する関数と、渡されたパラメーターはユーザーが提供したものになるため、基本的にここで値をハードコーディングする代わりに、ユーザーが提供した値を与えます 代わりに、日数がユーザー入力になります。この関数は文字列全体を返すため、出力されません。覚えているだけなので、これを実行して200までの値を指定すると、 ここには出力がありません。
(1:11:33) 何も出力しませんでした 基本的にここで値を返しただけです 何もしていないので、ここで欠落している最後の部分は、関数が返す文字列が返すテキストを表示することです。したがって、その戻り値を最初に保存します 計算値を実行してみましょう。これを計算値変数に保存します。最終的に出力できます。実行して、何が起こるか見てみましょう。10 10 日と入力して、結果を見てみましょう。計算の結果、ここにこの奇妙な値があることがわかります。
(1:12:18) 正確に起こったので、基本的にこの数値を表す計算のこの部分は適切な計算を行いませんでした。その理由は、入力関数で取得した入力値が常に文字列ではなく文字列として扱われるためです。 基本的にこの場所で 10 を入力すると、数値は実際には数値ではなくテキストとして扱われ、この奇妙な結果の出所は基本的に 10 であり、実際の計算を 10 回行う代わりに 24 10 を 24 回出力します。 24回印刷され、それだけです
(1:13:02) これが文字列として解釈されたときに発生するので、入力値をテキストではなく整数として、または文字列としてではなく、数値として python に認識させるにはどうすればよいでしょうか。実際には非常に簡単に行うことができます。 次の行では、ユーザー入力が再び表示されます。これは文字列であるため、数値にする必要があります。int とユーザー入力を使用して、値を 1 つのデータ型から もう 1 つは鋳造と呼ばれます。
(1:13:43) 文字列連結の例で数値を文字列に変換します。これは関数呼び出しであることを既に知っているはずの構文から再度引用します。そのため、Python 自体が提供する int という関数を再度呼び出しています。 その関数を記述せず、文字列である 1 つのパラメーターを渡します。結果としてその文字列から整数を取得する必要があります。その数値を変数に保存し、それをユーザー入力数値と呼びましょう。これで 10 になりました。 文字列ではなく数値として、その文字列を渡す代わりに
(1:14:22) ユーザー入力 これで期待される関数番号を与えることができます それを保存して実行しましょう 10 を入力してみましょう これで計算が正しくなりました ここでお見せしたいのは、このユーザー入力が実際にどのようになったかです pycharm のようなコード エディターなしで動作するので、このコードをすべてコピーして端末に戻り、テスト ドット pi にコードを貼り付けて保存します。ユーザー入力がどのように機能するかを実際に見てみましょう。 シンプルなターミナル ウィンドウで実行すると、ここに示すように最初にメッセージが表示されます
(1:15:15) プロンプトがここにあるので、値を入力できます 25 を入力してみましょう。結果は 25 日間で 600 時間です ユーザーがここに無効な値を入力するとどうなるか、ユーザー入力を受け入れます。たとえば、日数の正の値の代わりに、たとえば -10 のような負の値を入力すると、明らかにその入力値は意味をなしません。 しかし、私たちはまだ正しい値を計算して与えています。
(1:16:03) これはプログラミング全般におけるもう 1 つの重要な概念です。ユーザーがプログラムに何らかの入力値を与えることを許可する場合、それらを制限し、入力として提供されたものが特にプログラムにとって有効な値であることを基本的に検証したいということです。 私たちの場合のように理にかなっています -10 プログラムはまだ計算を行いますが、実際には意味がありません.2つ目はプログラムをクラッシュさせないので、ここにテキストを入力するとどうなるか見てみましょう. 計算は行われませんでした
(1:16:45) 無効なユーザー入力が意味を成すか、アプリケーションをクラッシュさせる入力を使用してプログラム アプリケーションを基本的にクラッシュさせたからです。 アプリケーションをクラッシュさせる値であるため、ユーザー入力を検証する必要があります。これは、ユーザー入力を許可するたびに常に検証する必要があるため、プログラムの重要な概念です。この部分では、条件と呼ばれる概念を学習します。 再
(1:17:24) ユーザー入力の検証の例を使用してこの概念を学習するため、最初に検証できる計算を実際に行う前に、関数でユーザー入力の検証を行うことができます。 それは正の数であり、負の数ではないので、ユーザーが入力を与えるので、それを数値に変換し、その数値を関数に渡します。負の 10 正の 10 は基本的に数値であり、関数に渡されます。 ここで、この変数値が負の数であるかどうかを確認できます
(1:18:10) それをどのように行うか if else 条件文を使用して非常にシンプルで直感的に理解できる 日数が 0 より大きい場合は、それが正の数であることを意味します。 計算してこれらすべてを返しますが、ここに赤い線があることがわかります。基本的にif条件を使用するときはいつでも適切なインデントが必要なので、基本的にこの行はすべて、インデントしたのと同じ方法でこの行にインデントされます 関数内の関数本体全体 ロジックやコードが何であれ
(1:19:00) ここで if 条件の下にインデントされている場合、日数が本当に g の場合に実行されます
関数にまとめられ、結果として返されるか、返されました。この文字列全体、基本的にこの文全体を myvar という変数に保存しました。その myvar を出力すると、入力すると値が何度も出力されます 他の値を取得すると、別のテキストが返されますが、これは実際には、関数の実行からいくつかの結果を返すという非常に重要な概念です。
1:10:09
両方のタイプを持つことができる値を返す何か他のことや関数を実行する可能性があるため、ユーザー入力の例に戻ります。入力関数がユーザーが結果として入力した値を返し、それを変数に保存できることを願っています。 後でもう一度アクセスします この行を削除して、実際にユーザー入力の日数を計算してみましょう 実際にそれを行う関数を呼び出すことで、非常に簡単に日数を計算する方法を教えてください。
1:10:53
入力の時間数を計算する関数と、渡されたパラメーターはユーザーが提供したものになるため、基本的にここで値をハードコーディングする代わりに、代わりにユーザーが提供した値を与えるので、日数は ユーザー入力になります。この関数は文字列全体を返すため、印刷されません。ただ返すだけなので、これを実行して 200 までの値を指定すると、ここに出力がないことがわかります。 なぜなら私たちは
1:11:33
何も出力しませんでした 基本的にここで値を返しただけです 何もしませんでした したがって、ここで欠落している最後の部分は、関数が返す文字列を表示することです その戻り値を最初に保存します 計算された値を実行して保存します これを計算値の変数に入れ、最終的に出力できるようになりました。実行して、何が起こるか見てみましょう。10 10 日と入力して、何が得られるか見てみましょう。ここに、この奇妙な値が 計算結果だから何
1:12:18
正確に起こったので、基本的にこの数値を表す計算のこの部分は適切な計算を行いませんでした。その理由は、入力関数で取得した入力値が常に数値ではなく文字列として扱われるためです。基本的にこの場所で ここで日数入力 10 ここでは、実際には数値ではなくテキストとして扱われます。この奇妙な結果は、基本的に数値 10 が 24 回出力されるため、実際の計算を 10 回行う代わりに 24 10 が 24 回出力されます。
1:13:02
これは文字列として解釈されるときに発生します。その数値を、その入力値をテキストまたは文字列ではなく整数として数値として認識させるにはどうすればよいですか。ユーザーが入力した次の行で実際に行うのは非常に簡単です。 繰り返しますが、これは文字列であるため、数値にする必要があります。int とユーザー入力を使用してそれを行います。あるデータ型から別のデータ型に値を変換するプロセスは、キャストと呼ばれます。 私たちが向きを変えたとき、私たちはすでにその例を見ました
1:13:43
これは関数呼び出しであることをすでに知っているはずの構文から、文字列連結の例で数値を文字列に変換します。その関数を記述していないため、Python 自体が提供する int という関数を再度呼び出しています。 '文字列である 1 つのパラメーターを渡し、結果としてその文字列から整数を取得する必要があります。その数値を変数に保存し、それをユーザー入力数値と呼びましょう。 文字列を渡し、その文字列を渡す代わりに
1:14:22
ユーザー入力 これで期待される関数番号を与えることができます それを保存して実行しましょう 10 を入れてみましょう 計算が正しいことを示したいのは、このユーザー入力が pycharm のようなコードエディターなしで実際にどのように機能するかです このコードをすべてコピーしてターミナルに戻り、テスト ドット pi にコードを貼り付けて保存します。実際に、単純なコードを実行したときにユーザー入力がどのように機能するかを見てみましょう。 ターミナル ウィンドウで、ここに表示されているように、最初にメッセージが表示されます
1:15:15
プロンプトがここにあるので、値を入力できます 25 を入力してみましょう。結果は 25 日は 600 時間です。プログラムは機能しており、日数を時間数に変換し、ユーザー入力を受け入れます。 ユーザーがここに無効な値を入力した場合に発生します。たとえば、日数の正の値の代わりに、たとえば -10 のような負の値を入力すると、明らかにその入力値は意味がありませんが、まだ計算して与えています 値の権利と
1:16:03
これはプログラミング全般におけるもう 1 つの重要な概念です。ユーザーがプログラムに何らかの入力値を与えることを許可する場合、それらを制限し、入力として提供されたものがプログラム固有の有効な値であることを基本的に検証する必要があります。
私たちの場合のように理にかなっている -10 プログラムはまだ計算を行いますが、実際には意味がありません。次に、プログラムをクラッシュさせません。ここで、ここにテキストを入力するとどうなるか見てみましょう。 計算は行われませんでした
1:16:45
基本的に、無効なユーザー入力が意味を成すか、アプリケーションをクラッシュさせる入力を使用してプログラムアプリケーションをクラッシュさせたからです。計算すら不可能であり、基本的にユーザーが意味のない値またはアプリケーションをクラッシュさせる値を提供することを避けたいからです。 したがって、ユーザー入力を検証する必要があります。これはプログラムの重要な概念です。ユーザー入力を許可するときは常に検証する必要があるため、この部分では条件と呼ばれる概念を学びます。
1:17:24
ユーザー入力の検証の例を使用してこの概念を学習するので、ユーザー入力の検証をどこで行うか、実際に計算を行う直前に関数で実行できます。最初に検証できるのは、それが正の数であり、 負の1なので、ユーザーは入力を数値に変換し、その数値を関数に渡します。負の10正の10は基本的に関数に渡され、ここでこの変数値かどうかを確認できます ここに負の数があります
1:18:10
if else 条件ステートメントを使用して、非常にシンプルで直感的に理解できます。つまり、日数が 0 より大きい場合は、それが正の数であることを意味し、計算を実行して、このすべてを返したいと考えています。 ただし、ここに赤い線があることがわかります。基本的に if 条件を使用するときは常に適切なインデントが必要なので、基本的にこの行はすべて、関数内の関数本体全体をインデントしたのと同じように、この行に対してインデントされます。 どんなロジックやどんなコードでも
1:19:00
ここで if 条件の下にインデントされているのは、日数が 0 より大きい場合に実行されるので、もう一度試してみましょう 実行します 正の 10 を入れましょう 10 日は 240 時間であることがわかりました 計算されました -10 を入れましょう この行は実際には -10 の入力値に対して実行されなかったため、基本的に出力はありません。ユーザーにこれが無効な値であることを伝えたい場合はどうすればよいでしょうか。 できないことを示すのではなく計算する
1:19:45
これが真でないときはいつでもこのフィードバックメッセージまたはエラーメッセージを返すことにより、日数がゼロより大きくないときはいつでも別のメッセージを返す必要があり、else を使用してそれを行うことができます。 インデントとここに書いたものは、日数がゼロより大きくない場合に実行されます。ここでは、入力した負の値を返すので、変換は行われません。ここで、プログラミングの別の特別な用語の時間です。
1:20:33
符号は比較演算子と呼ばれ、そのうちの 3 つがあります。大なり小なりと等号があります。これらは比較演算子と呼ばれます。これは、2 つの値を比較する演算で使用されるためです。このコースの前に、プラスマイナス除算などの算術演算を学習しました。 簡単な概念を表す派手な言葉ですが、これらはこれらの公式用語であるため、誰かが言及した場合、彼らが何について話しているかがわかります。アプリケーションを実行して、-10 を提供しましょう。
1:21:11
この行はユーザーへのフィードバックとして出力されたので、フローをもう一度見てみましょう。この場合、ユーザーは入力を返します -10 これを整数に変換すると、-10 の整数になり、days to units 関数に渡します。 これらの 2 つの単位関数には、基本的にこの if else ステートメントがあり、それがプログラミングで呼び出される方法です。if else ステートメントは、この入力がゼロより大きいかどうかを検証またはチェックします。そうであれば、関数は結果としてこれを返すので、基本的に適切な計算 メッセージ
1:21:59
それ以外の場合、基本的にはそうでない場合は、基本的にはユーザーへのフィードバックメッセージのみが返されます。そうでない場合は、そのようなチェックがないことに注意してください。ここではチェックしません。日数がゼロ未満であり、その理由 基本的に、これが真でないかどうかを判断するか、そうでない場合はこれを行うだけなので、ここで追加のチェックは必要ありません。このセグメントは、チェックを行っている場所です。 は条件付きと呼ばれるため、基本的にはプログラムを提供しています
1:22:37
この条件が正しい場合は条件を実行し、それ以外の場合は別のことを行い、その条件は真または偽になります。10 を入力すると、この条件は真になります。-10 を入力すると、0 より大きいため、この条件は負になります。そうではありません。 0 よりも大きく、プログラミングにおける true 値と false 値は、実際にはブール値と呼ばれる独自のデータ型で表され、この条件付きまたは gi真か偽か 私がしようとしていることは私がしようとしていることです
1:23:19
チェックを行う直前にこの条件を出力します。正の数値入力の場合は true を出力し、負の場合は 0 より大きくない場合は false を出力する必要があるため、最初にテストしてみましょう。正の 10 をここに入力します。 この条件が実際に真であるため、真と表示されます。これは文字列ではないことに注意してください。そのため、ここで引用符は必要ありません。基本的に式全体を print 関数に入れるだけで、負の 10 で同じことをしましょう。 そして、あなたが見る
1:24:06
false と私が言ったように、 true と false の値は、ブール値と呼ばれるプログラミングの独自のデータ型に属します。再度、出力する代わりに変数に保存できることを実証できます。これを条件付きチェックと呼びましょう。Python には 基本的に変数または単一の値の型データ型をチェックまたは出力する type と呼ばれる関数なので、それを渡すと、条件付きチェックのデータ型が得られます。明らかにその結果を見たい場合は、それを出力する必要があります そうならないように全体を印刷してください
1:24:54
この時点で何を渡しても、ここにクラス boolean が表示されます。したがって、true または false の値を持つこの条件付きチェックは boolean 型です。ここで注意したいことが 2 つあります。最初の 1 つは、 私はここで型である関数を呼び出しています、そしてその関数型が返すものは基本的にこの出力です ここでそれを出力しているので、基本的にネストされた2つの関数呼び出しがあり、それは絶対に問題ありません関数呼び出しをネストすることができます別の実行例
1:25:37
呼び出されるこのネストされた関数は、たとえば、これらを変数に割り当ててからここに渡すのではなく、ここにあり、実際にそのステップを節約でき、単位関数呼び出しで値として渡すことができるため、これは完全に有効な構文です。 関数呼び出しでネストすることができます。この追加の手順は必要ありません。必要な回数だけ行うことができます。その構文が少し分離されていて、2 つの 3 つの 4 つの関数がない場合は、見た目がきれいになります。 ネストされた呼び出しは 1 つです
1:26:16
もう 1 つのことは、ここでクラスのブール型を見たところです。文字列と数値の同じ出力を実際に見てみましょう。デモンストレーションのために、実際に文字列と整数の型を見てみましょう。 テストするために、これは文字列型である必要があることを示す文字列の型を出力して実行します。クラス文字列が表示されます。次に、クラス int が表示される整数を指定しましょう。浮動小数点数を指定します。 浮く
1:27:09
これはタイプをチェックする非常に便利な方法であり、実際には後の例で必要になるので、アプリケーションに戻ります。ブール値と条件に関する注意事項の 1 つは、これらの多くを使用することです。 プログラミングは、プログラミングであらゆる種類のロジックを記述する主要な部分またはコア部分であるため、アプリケーションでif else条件とステートメントとブール値が必要になるため、これは非常にコアな概念であり、 それらをたくさん使っている
1:27:48
次の例では、ここでこのコードを削除しましょう。次に進む前に、この条件のために負の数が計算されていないことに注意してください。ゼロについてはどうでしょうか。実際に試してみましょう。ゼロを入力します。 これも実際には評価されますが、ゼロ日の入力は明らかに単位がゼロになるため、意味がありません。入力すると、ここに負の値を入力したというユーザーへのフィードバックが表示され、変換が行われず、その理由が表示されます これだからです
1:28:30
ここでの条件は、ゼロより大きい日数をチェックします。つまり、負の数とゼロはこの条件に一致しないため、基本的にこのフィードバックが返されますが、ゼロを入力したときに負の値を入力したというメッセージが表示されます。 ユーザーがゼロを入力した場合は特定のメッセージを、負の値を入力した場合は特定のメッセージを、これら 2 つを区別したい プログラミングの if else ステートメントでどのようにそれを行うことができるか
1:29:08
基本的には複数の if を持つことができるので、最初に日数が 0 より大きいかどうかを確認するにはどうすればよいですか? その構文は el if これは基本的に else の組み合わせであり、そうでない場合、これが true でない場合は、日数が 0 に等しい別の条件をチェックしたいと考えています。
1:29:44
これで、等式記号は一般的にここにあることがわかりましたが、プログラミングで何かが他の何かと等しいかどうかをチェックするとき、その等式チェックは 2 つの等号で表されます。その理由は、1 つの等号が既に代入を表すために使用されているためです。 混乱しないように変数に値を入れるプログラミングにおけるこれらの 2 つのアクションは、何かが特定の値に等しいかどうかを確認するときに 2 つの等式記号を使用します。ここと同じように、この条件が満たされるたびに何らかのロジックを実行します。
1:30:27
true ですので、この例ではユーザーにゼロを入力したことを伝えたいので、有効な正の数を入力してください。入力値が正の数の場合はこのロジック フローを再度実行し、そうでない場合は関数が計算とメッセージを返します。 正の数の場合、ゼロかどうかを追加でチェックします。ゼロでない場合、これは基本的に最後の条件です。負の数でなければならないことがわかっているので、これをテストしてみましょう。そこに正の数を入力しましょう。
1:31:13
0 を入力してみましょう 0 を入力しました 谷の正の数を入力し、負の数を入力してみましょう すべてが完全に機能します if ステートメントと else ステートメントの間に複数の alif を使用できることに注意してください。 何らかの条件があるため、これはフォールバックのようなものです。以前に述べたすべての条件が一致せず、基本的にすべて false であった場合、これはその場合に実行されるロジックです。入力値を検証しました。
1:31:58
ユーザーにとっては、意味をなさない値については何も計算しないため、プログラムについてはかなり満足しているかもしれませんが、ユーザーが数値の代わりにテキストを入力した場合に何が起こるかという問題がまだ残っています。 数値は重要ではありません 基本的にテキストを入力すると、プログラムが実際にクラッシュしたことがわかります。これは実際にはプログラムを保護したいユーザー入力です。 申し込んでみましょう
1:32:38
実際に何が起こったのかを見てください。無効なリテラルリテラルを提供したことは、基本的にテキスト自体または数値を意味するため、基本的に int 関数に入力した値が問題であり、この関数呼び出しは基本的に爆発しただけです。 数値の文字列表現なので、基本的に ind はこのようなものやこのようなものを期待し、私のテキストやテキストを期待していないので、テキスト入力でアプリケーションがクラッシュしたので、数値を指定するとどうなるか見てみましょう
1:33:22
しかし、整数の代わりに浮動小数点数を入力して19.99を入力すると、同じエラーが表示されます。この関数は基本的にエラーを返します。浮動小数点数を整数に変換できないためです。 プログラムが爆発するので、どうすればそれを回避できるので、基本的に int 関数が無効な値で実行される前に、この全体を検証し、それが起こる前にプログラムを停止する必要があるため、int が取得される前に検証が必要です
1:34:04
ここで実行できるので、その行が実行される前に検証を行います。これを行う方法の 1 つは、おなじみの if else ステートメントを使用することです。これにより、ユーザー入力が数字であるかどうかを構文から判断できます。 これが関数を呼び出していることはわかっていますが、このように関数を呼び出すのではなく、基本的にスタンドアロンであることに注意してください。変数ドットと関数名を使用する構文があるため、関数のここでパラメーターとしてこれを渡す代わりに ブラケットとして渡します
1:34:50
もう一度パラメーターを使用しますが、この構文を正しく使用すると、各数字関数がパラメーターとしてユーザー入力に対して実行され、条件がある場合はこれが true または false のいずれかになります。これはブール値であり、ユーザー入力が数字の場合は基本的に数字なので、基本的にこれ テキストである入力値を除外するため、基本的に数値ではありません。入力が数字の場合は、この行を実行し、アプリケーションの残りの部分もこのように実行します。そうでない場合は、ユーザー入力が 数字私たち
1:35:36
アプリケーションで何も実行したくない 実行を停止し、これが無効な入力値であることをユーザーに伝えたい クラッシュしないようにプログラムで何もしていない ユーザーにあなたの入力は数値ではないと言っています私のプログラムを台無しにしないでください.それで実際にテストしましょう. 代わりに実行されたelseブロックが実行され、
1:36:26
ユーザーへのメッセージなので、基本的にこのチェックでアプリケーションがクラッシュするのを回避しました。適切な数を試すと動作します。たとえば、0 を入力すると、アプリケーションが実行され、ここからメッセージが表示されるので、アプリケーションはより多くまたは あまり保護されておらず、有効な数値ではないという無効な入力数値は許可されていません。プログラミングにはさまざまな種類の数値があり、浮動小数点数もあることがわかったので、数字関数が実際に何をチェックするかを実際に見てみましょう。実際に見てみましょう 試す
1:37:16
整数の代わりに浮動小数点数を提供するええと、これは私たちのプログラムにとって適切な有効な入力ではないので、19.99 と入力します。各桁が浮動小数点数に対して false であることがわかります。入力は浮動小数点数に対しても有効な数値出力ではありません。 これは完璧です。まさに私たちが必要としているものです。実際に負の数を入力してみましょう。各数字関数が true または false を返すかどうかを見てみましょう。入力すると、else ブロックが実行されたことがわかります。 負の数
1:38:00
したがって、基本的にこの関数は、アプリケーションを不適切なユーザー入力から保護するために、多くの不適切な入力を除外します。つまり、負の値のチェックはもう必要ありません。ちなみに、Python では実際に if ステートメントを使用できます。 最後にelseがなければ、これは完全に正常に機能し、これは私たちのアプリケーションになる可能性がありますが、プログラミングでは、このタイプのロジックを基本的に関数の外に直接配置しないことに注意してください。一般的なベストプラクティスとして、ほとんどのロジックをカプセル化します 基本的
1:38:49
関数では、コードのクリーンアップとして、これらすべてを取得して関数に入れることができるので、ここで関数を作成し、それを検証して実行するか、このようなものと呼びましょう。コピーしたすべてのロジックは このように単にその関数に貼り付けるだけなので、ロジックは独自の関数にうまくカプセル化されていますが、ご存知のように、関数を作成するときにその関数を呼び出す必要があります。そうしないと何も起こらないので、ここで呼び出します。 'パラメータがなく、私たちもありません
1:39:39
ユーザー入力はグローバル変数であるため、関数はそれにアクセスできるため、ユーザー入力を提供する必要があります実際にテストして動作し、悪い入力を提供してみましょう。 次のステップとして、次のステップとして、if else ステートメントがネストされているコードで非常に頻繁に遭遇する概念または何かを示したいと思います。 による例
1:40:26
プログラムを少しクリーンアップします。ここでわかるように、2 つの異なる場所で検証を行っているため、ここでユーザー入力を検証していますが、これら 2 つのユニット関数自体の内部でも検証しているため、すべての検証を行うことができます。 この検証および実行関数の 1 つの場所で、基本的にすべての検証ロジックがここにあり、単位関数への日数が検証ではなく計算のみを行うようにします。このようにして、関数とコードは少しクリーンになり、より論理的に構築されます。
1:41:06
したがって、ユーザー入力が数字であることを検証した後、それを整数に変換します。ここにユーザー入力の整数値があるので、その整数値がゼロより大きいかゼロに等しいかを実際に確認でき、それを正しく行うことができます ここでは単位関数への日数に渡さずに、このように条件付きの場合、計算を実行したい場合はゼロより大きいユーザー入力番号を実行するので、これらの行は両方とも、ユーザー入力があった場合にのみ実行されます 数が多い
1:41:47
0 よりも正確に 0 の場合、ユーザーにメッセージを出力したい 0 を入力しました。負の数はこの条件を使用して既にカバーされていることを思い出してください。残りの 1 つをコピーします。 ここに貼り付けます変数はユーザー入力番号と呼ばれるので、修正します。そのメッセージを出力します。つまり、ここで検証は必要ありません。単純に計算を行うことができるので、これを実行します if の論理フロー
1:42:33
else またはネストされた e-files ステートメントは、ここに最初の if があります。これらの if else のインデントは、基本的に同じ行の同じ位置にあり、ネストされた if else または私たちの場合は alif も同じです。 位置 繰り返しになりますが、最初は大きな検証です。最初の1つは、そもそもユーザー入力の数字です。そうでない場合は、基本的にプログラムをシャットダウンして、ユーザーにメッセージを出力します。それが数字の場合は、追加の検証が必要です。 その数字は正ですか
1:43:17
数値またはゼロであるため、ネストされたifallステートメントを使用して追加の検証を行います。基本的に、この行は、有効な数値であり、正の数値である場合にのみ実行されます。そのため、一度 これらの 2 つのユニット関数は冷たくなり、ネストされた if else ステートメントは世界で最も美しいものではないことをすでに考え、気づいているでしょう。実際にはかなり醜いです。特に、複数の if else if が間にある
1:43:55
関数は実際には非常に見栄えが悪くなる可能性があるため、基本的にコードをきれいに保つために、コード内にこれらの if else ステートメントを複数レベル入れておくことはお勧めしませんが、アプリケーション コード内のプログラムで頻繁に遭遇することがあります。 このように書く必要があるだけです。ここにあるのは Python での try accept と呼ばれるものです。ご覧のとおり、ここではユーザー入力を正しく検証しており、その条件が true の場合にのみコードのこの部分を実行しています。
1:44:37
ここにロジックがあり、何かがうまくいかない可能性のある複数の場所がある場合はどうなるでしょうか。関数の実行が基本的に間違った入力のために爆発する可能性があるとしましょう。または例として、これは数字であり、実際にはすべてのユースケースをカバーしていないので、 ユーザーが入力できる値があり、それでもプログラムを爆破する可能性があるため、ifステートメントを使用してそのような可能性のあるシナリオをそれぞれチェックし、それらすべてが検証されたら実際の計算を行う代わりに、代わりに何ができるか
1:45:17
基本的に、ここでコードのこの部分を実行してみて、何か問題が発生した場合は、関数呼び出しまたはロジックの実行が失敗した場合、そのエラーをキャッチし、そのエラーで何が起こるかをプログラムで制御したいとPythonに伝えます。 キャッチロジックは受け入れられ、基本的にこのブロックを使用してキャッチする値のタイプを指定します。そのエラータイプの名前は、実際には、テキストとフロートを提供したときに出力で見たものです。
1:46:07
値エラーは値エラーなので、基本的にキャッチしたいエラーなので、ここでこのコードブロックを実行しようとするものを知っていることをpythonに伝えます。そのコードの行の1つが値エラーになる場合は、プログラムをクラッシュさせるだけではありません 基本的にそのエラーをキャッチしてユーザーにわかりやすいメッセージを出力するので、実際にこれを試してみましょう。try には if ステートメントのような検証がないため、ここにテキストを入力すると int 関数が実際にテキストとともに呼び出されます。 値エラーが発生し、
1:46:56
このブロックはそのエラーを処理するので、入力すると、入力が有効な数値ではないことがわかりますメッセージが出力され、整数に変換されない浮動小数点数と適切な数値に対しても同じことが機能します 整数値で問題なく動作し、if else ステートメントと try except の使用の違いは、このような try except ブロック全体で複数のエラーをカバーできるため、具体的に検証を行う必要がなく、場合に特に役立ちます。 できないところ
1:47:43
その条件チェックで何かを見逃す可能性がある場合は、 if 条件を使用して実際に何かを検証するので、基本的には、どんな値で何を実行しようとしているのかを知っていると言うだけで、エラーが発生した場合でも、それはカバーされ、明らかな違いがあります この if else の間にあるのは、ここでは実際にプログラムをクラッシュさせるものは何もない プログラムがまだ機能するということは、ゼロ日の権利を持つナンセンスな値です。
1:48:20
基本的に、どんな種類の空気をカバーしたいのか分かっていると言います それが価値のある空気であろうと他の種類の空気であろうと気にしません この場合、どんな種類の空気でも処理させてください 一般的すぎるという警告ですが、これは機能し、すべての空気のケースをカバーすることになりますが、値エラーに戻ると、多くのプログラミング言語ではこれが実際には try catch と呼ばれているため、accept は実際にはきれいです。 Pythonに固有の私は個人的にキャッチを試してみると思います
1:48:55
ここで発生する可能性のあるエラーをキャッチし、基本的にそれを catch ブロックで処理するため、より理にかなっています。したがって、他のプログラミング言語で try catch を聞いたり見たりした場合、これは python を除いて try と同じであることに注意してください。 if ステートメントを try except に変換したために見逃していたのは、負の数はアプリケーションでエラーを引き起こさないため、負の数を再度検証する必要があるため、ここの except ブロックではカバーされないため、追加しましょう 戻る
1:49:31
前のelseブロックで、これらのどちらも真でない場合は、自動的に負の数であることを意味するので、ユーザーが負の数を入力して変換しないというメッセージを出力しましょう。 それは -10 で、アプリケーションには小さな問題が 1 つあります。つまり、一度しか使用できないため、基本的に値を入力するたびに、値が計算されるか、無効な値を指定したというメッセージが表示されます。 プログラムは基本的に終了するので、
1:50:34
別の値の計算を行いたい場合は、アプリケーションが提供する値を再起動してから同じことを行う必要があるため、そのプログラムを使用して基本的に多くの異なる値の時間数を計算する場合、これはあまり便利ではありません。 アプリケーションを何度も再起動したくないため、計算のためにいくつかの異なる値を当てはめ続けるため、最初の値を計算した後、プログラムを実際に継続させるにはどうすればよいかただただ
1:51:11
実行し続けて値を受け入れ続けるので、どうすればそれを行うことができますか? while loop と呼ばれるものを使用してロジックを実装できます。 そのロジックが実行されることは基本的にそのループの条件で定義され、条件は10回実行する必要があるか、アプリケーションで特定のイベントが発生するまで実行する必要がある条件であり、それ以外の場合はすでに知っている条件です
1:51:57
ステートメントの条件は基本的に、true または false のいずれかを与えるロジックであるため、条件はいくつかのロジックをチェックし、true または false のいずれかの結果を与えるため、問題は、このアプリケーションをこのケースで何回実行するかです。 プログラムを強制終了するまでここから実際に停止するまで無期限に実行したいので、その条件は常に true である必要があり、アプリケーションではループの一種である while ループを使用し、 非常に単純な構文
1:52:37
while と while が実際に条件を取るかのように、これがループの条件になるので、基本的に while ループに、その後に続くロジックを何回実行する必要があるかを伝えたいと思います。 ここでいくつかの条件を指定してループで何度も実行する必要があるため、特定のケースでプログラムを何回実行する必要がありますか?実際にここからエディターから直接停止するまで、プログラムを無期限に実行する必要があります。 ループの状態を意味します
1:53:21
これは、次の行を実行するかどうかを決定するもので、私たちのケースでは常に true にする必要があります。なぜなら、それが false の場合、ループはもはや実行されずに停止するため、常に true であることを確認するにはどうすればよいでしょうか。ここで true と書くだけです。 プログラミング言語の true と false には独自のデータ型があり、予約語でもありますが、これは単なるテキスト表現ですが、基本的にはこれらの他の単語と同じように強調表示されていることがわかります。
1:53:59
これは true のブール値であり、特に python の場合、他のプログラミング言語とは異なり、大文字の t で true を実際に記述することに注意してください。これは基本的に単なる文字列になるため、python はそれをどう処理すればよいかわかりませんが、実際の幅を認識します。 大文字の t ということで、while ループの条件が常に true であることをループに伝えているので、基本的にこれらの 2 行を無期限に実行します。条件は決して変更されないため、常に true になり、構文はおそらく既におなじみです。
1:54:40
if または try のようなキーワードがあります 実際に構文を if ステートメントと比較できるので、ここに while キーワードがあり、次に条件があるので、これはこれと同じタイプの条件です ここにあるのは 基本的にここで真の値を修正しました。条件に基づいて真または偽になる可能性があります。次に、コロンがあり、次の行のインデントがあるため、これらはすべてwhileループに属しているため、基本的にはこれでできます アプリケーションを実行し、
1:55:17
私たちのプログラムが無期限に実行されることを確認してください。これが最初のプログラムです。10 awesome と入力すると、結果が得られ、次の実行で再び入力が求められ、-10 を実行できます。 負の値ですが、再度値を入力できます この値で処理する必要のある無効な値を入力しましょう エラー ブロックを実行します これは有効な数値ではなく、アプリケーションは基本的に続行します 続行する必要があるアプリケーションがあるかどうかを確認します
1:55:57
実行中、基本的にユーザー入力を何度も取得する アプリケーションが何らかの不正な入力によってある時点でクラッシュするのは望ましくない アプリケーションが引き続き実行されるように、すべてのタイプの入力をキャッチして処理する必要があり、停止したい場合 基本的にここでシャットダウンしてプロセスが終了したら、プログラムで1つの最適化を行うことができます。これは、ユーザー自身が特定の入力値を使用してアプリケーションを停止できるようにするためです。
1:56:45
その特定の単語に対してのみ停止する必要があるため、これ以上実行しないようにする必要があります。基本的には、常に真である条件を設定する代わりに、ユーザーが単語を入力しなかった場合に終了してからプログラムの実行を続行するという条件が必要です。 ユーザーが exit を入力した場合、基本的にはそれを停止するだけなので、ここで条件を変更する必要があるため、ここではユーザー入力が exit ではないので、ユーザー入力が exit ではなく、正しくないことを確認する方法を学びませんでした。 等しいかどうかをチェックするので、
1:57:33
入力数値がゼロに等しいか、それよりも大きいか小さい場合ですが、プログラミングで等しくないかどうかをチェックする方法を学習していません。これは python に固有のものではありません。これが好きなので、2つの等式記号の代わりに感嘆符と等号があり、それを文字列と比較したい場合は、明らかにその文字列を入力します。この場合、それは終了です。したがって、基本的にこの条件は、ユーザー入力が終了していない間、whileループを伝えます プログラムを実行し続けるので、これが真実である間、基本的には進み続けますが、
1:58:20
ユーザーが exit を入力すると、これは true ではなくなり、false になるため、ループは基本的に中断され、アプリケーションは終了します。ここで使用しているこのユーザー入力に警告があることがわかります。カーソルを合わせると、メッセージが表示されます。 それは名前のユーザー入力が未定義である可能性があるため、常に未定義であるとは限りませんが、そうである可能性があることを示しています.pycharmはインテリジェントなエディターであるため、単純なコードエディターまたは通常のコードエディターでおそらくそうする. そのような警告は表示されません
1:58:59
繰り返しますが、コードを書くときに誤って犯す可能性のある間違いのいくつかを回避するのに役立ちます。基本的に、エラーまたは可能性のあるエラーを検出し、修正するように指示します。この種のインテリジェントな警告とエラー メッセージは非常に多くなる可能性があります。 アプリケーションをプログラミングするときの助けになり、その警告を修正しましょう。問題のすべては、この while ループのユーザー入力変数自体が存在しないということです。なぜなら、ユーザー入力変数を作成しているためです。
1:59:41
最初にこの行に入力すると、アプリケーションは基本的に文句を言います。これは、while ループが初めて実行されるときにユーザー入力変数を見つけることができないためです。実際にそれを試してみましょう。 ループの最初の実行前に変数を入力するので、ここでユーザー入力を作成するので、while ループが最初に実行される前にこのユーザー入力変数を作成します。そのユーザーの値は実際には問題ではありません。 入力変数は